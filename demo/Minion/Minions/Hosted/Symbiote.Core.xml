<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Symbiote.Core</name>
  </assembly>
  <members>
    <member name="T:Newtonsoft.Json.JsonReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonReader.State">
      <summary>
            Specifies the state of the reader.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader" /> class with the specified <see cref="T:System.IO.TextReader" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>true if the next token was read successfully; false if there are no more tokens to read.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Skip">
      <summary>
            Skips the children of the current token.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken)">
      <summary>
            Sets the current token.
            </summary>
      <param name="newToken">The new token.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken,System.Object)">
      <summary>
            Sets the current token and value.
            </summary>
      <param name="newToken">The new token.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetStateBasedOnCurrent">
      <summary>
            Sets the state based on current token type.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Close">
      <summary>
            Changes the <see cref="T:Newtonsoft.Json.JsonReader.State" /> to Closed. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.CurrentState">
      <summary>
            Gets the current reader state.
            </summary>
      <value>The current reader state.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.QuoteChar">
      <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.TokenType">
      <summary>
            Gets the type of the current Json token. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Value">
      <summary>
            Gets the text value of the current Json token.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.ValueType">
      <summary>
            Gets The Common Language Runtime (CLR) type for the current Json token.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Depth">
      <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
      <value>The depth of the current token in the JSON document.</value>
    </member>
    <member name="T:Newtonsoft.Json.Bson.BsonReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream,System.Boolean,System.DateTimeKind)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="stream">The stream.</param>
      <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
      <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>
            A <see cref="T:System.Nullable`1" />.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.JsonNet35BinaryCompatibility">
      <summary>
            Gets or sets a value indicating whether binary data reading should compatible with incorrect Json.NET 3.5 written binary.
            </summary>
      <value>
        <c>true</c> if binary data reading will be compatible with incorrect Json.NET 3.5 written binary; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.ReadRootValueAsArray">
      <summary>
            Gets or sets a value indicating whether the root object will be read as a JSON array.
            </summary>
      <value>
        <c>true</c> if the root object will be read as a JSON array; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.DateTimeKindHandling">
      <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.
            </summary>
      <value>The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.#ctor">
      <summary>
            Creates an instance of the <c>JsonWriter</c> class. 
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndObject">
      <summary>
            Writes the end of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndArray">
      <summary>
            Writes the end of an array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndConstructor">
      <summary>
            Writes the end constructor.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd">
      <summary>
            Writes the end of the current Json object or array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader)">
      <summary>
            Writes the current <see cref="T:Newtonsoft.Json.JsonReader" /> token.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read the token from.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the specified end token.
            </summary>
      <param name="token">The end token to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteIndent">
      <summary>
            Writes indent characters.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueDelimiter">
      <summary>
            Writes the JSON value delimiter.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteIndentSpace">
      <summary>
            Writes an indent space.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON without changing the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteRawValue(System.String)">
      <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int32})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt32})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int64})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt64})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Single})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Double})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Boolean})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int16})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt16})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Char})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Byte})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.SByte})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Decimal})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTime})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTimeOffset})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Object)">
      <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteWhitespace(System.String)">
      <summary>
            Writes out the given white space.
            </summary>
      <param name="ws">The string of white space characters.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Top">
      <summary>
            Gets the top.
            </summary>
      <value>The top.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.WriteState">
      <summary>
            Gets the state of the writer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Formatting">
      <summary>
            Indicates how the output is formatted.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Bson.BsonWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonWriter" /> class.
            </summary>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the end.
            </summary>
      <param name="token">The token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRawValue(System.String)">
      <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteObjectId(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value that represents a BSON object id.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRegex(System.String,System.String)">
      <summary>
            Writes a BSON regex.
            </summary>
      <param name="pattern">The regex pattern.</param>
      <param name="options">The regex options.</param>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonWriter.DateTimeKindHandling">
      <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime" /> values to BSON.
            When set to <see cref="F:System.DateTimeKind.Unspecified" /> no conversion will occur.
            </summary>
      <value>The <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime" /> values to BSON.</value>
    </member>
    <member name="T:Newtonsoft.Json.Bson.BsonObjectId">
      <summary>
            Represents a BSON Oid (object id).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonObjectId.#ctor(System.Byte[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonObjectId" /> class.
            </summary>
      <param name="value">The Oid value.</param>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonObjectId.Value">
      <summary>
            Gets or sets the value of the Oid.
            </summary>
      <value>The value of the Oid.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverter">
      <summary>
            Converts an object to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.GetSchema">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of the JSON produced by the JsonConverter.
            </summary>
      <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of the JSON produced by the JsonConverter.</returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverter.CanRead">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverter.CanWrite">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.BinaryConverter">
      <summary>
            Converts a binary value to and from a base 64 string value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DataSetConverter">
      <summary>
            Converts a <see cref="T:System.Data.DataSet" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataSetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataSetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataSetConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
      <param name="valueType">Type of the value.</param>
      <returns>
        <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DataTableConverter">
      <summary>
            Converts a <see cref="T:System.Data.DataTable" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataTableConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataTableConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
      <param name="valueType">Type of the value.</param>
      <returns>
        <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.CustomCreationConverter`1">
      <summary>
            Create a custom object
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)">
      <summary>
            Creates an object which will then be populated by the serializer.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanWrite">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DateTimeConverterBase">
      <summary>
            Provides a base class for converting a <see cref="T:System.DateTime" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DateTimeConverterBase.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.EntityKeyMemberConverter">
      <summary>
            Converts an Entity Framework EntityKey to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.KeyValuePairConverter">
      <summary>
            Converts a <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.BsonObjectIdConverter">
      <summary>
            Converts a <see cref="T:Newtonsoft.Json.Bson.BsonObjectId" /> to and from JSON and BSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.RegexConverter">
      <summary>
            Converts a <see cref="T:System.Text.RegularExpressions.Regex" /> to and from JSON and BSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.RegexConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.RegexConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.RegexConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.StringEnumConverter">
      <summary>
            Converts an <see cref="T:System.Enum" /> to and from its name string value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.CamelCaseText">
      <summary>
            Gets or sets a value indicating whether the written enum text should be camel case.
            </summary>
      <value>
        <c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.ConstructorHandling">
      <summary>
            Specifies how constructors are used when initializing objects during deserialization by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ConstructorHandling.Default">
      <summary>
            First attempt to use the public default constructor then fall back to single paramatized constructor.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ConstructorHandling.AllowNonPublicDefaultConstructor">
      <summary>
            Allow Json.NET to use a non-public default constructor.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.IJEnumerable`1">
      <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
      <typeparam name="T">The type of token</typeparam>
    </member>
    <member name="P:Newtonsoft.Json.Linq.IJEnumerable`1.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> with the specified key.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Newtonsoft.Json.IJsonLineInfo">
      <summary>
            Provides an interface to enable a class to return line and position information.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.IJsonLineInfo.HasLineInfo">
      <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
      <returns>
        <c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.IJsonLineInfo.LineNumber">
      <summary>
            Gets the current line number.
            </summary>
      <value>The current line number or 0 if no line information is available (for example, HasLineInfo returns false).</value>
    </member>
    <member name="P:Newtonsoft.Json.IJsonLineInfo.LinePosition">
      <summary>
            Gets the current line position.
            </summary>
      <value>The current line position or 0 if no line information is available (for example, HasLineInfo returns false).</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JToken">
      <summary>
            Represents an abstract JSON token.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Compares the values of two tokens, including the values of all descendant tokens.
            </summary>
      <param name="t1">The first <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <param name="t2">The second <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <returns>true if the tokens are equal; otherwise false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AddAfterSelf(System.Object)">
      <summary>
            Adds the specified content immediately after this token.
            </summary>
      <param name="content">A content object that contains simple content or a collection of content objects to be added after this token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AddBeforeSelf(System.Object)">
      <summary>
            Adds the specified content immediately before this token.
            </summary>
      <param name="content">A content object that contains simple content or a collection of content objects to be added before this token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Ancestors">
      <summary>
            Returns a collection of the ancestor tokens of this token.
            </summary>
      <returns>A collection of the ancestor tokens of this token.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AfterSelf">
      <summary>
            Returns a collection of the sibling tokens after this token, in document order.
            </summary>
      <returns>A collection of the sibling tokens after this tokens, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.BeforeSelf">
      <summary>
            Returns a collection of the sibling tokens before this token, in document order.
            </summary>
      <returns>A collection of the sibling tokens before this token, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Value``1(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key converted to the specified type.
            </summary>
      <typeparam name="T">The type to convert the token to.</typeparam>
      <param name="key">The token key.</param>
      <returns>The converted token value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Children">
      <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Children``1">
      <summary>
            Returns a collection of the child tokens of this token, in document order, filtered by the specified type.
            </summary>
      <typeparam name="T">The type to filter the child tokens on.</typeparam>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Values``1">
      <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
      <typeparam name="T">The type to convert the values to.</typeparam>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Remove">
      <summary>
            Removes this token from its parent.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Replace(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Replaces this token with the specified token.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToString">
      <summary>
            Returns the indented JSON for this token.
            </summary>
      <returns>
            The indented JSON for this token.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToString(Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Returns the JSON for this token using the given formatting and converters.
            </summary>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
      <returns>The JSON for this token using the given formatting and converters.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Boolean">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Boolean" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTimeOffset">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.DateTimeOffset" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Boolean}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int64">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int64" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTime}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTimeOffset}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Decimal}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Double}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int32">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int32" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int16">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int16" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt16">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt16" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int32}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int16}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt16}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTime">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.DateTime" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int64}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Single}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Decimal">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Decimal" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt32}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt64}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Double">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Double" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Single">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Single" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.String">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.String" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt32">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt64">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt64" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte[]">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Byte[]" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Boolean)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTimeOffset)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.DateTimeOffset" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Boolean})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int64)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTime})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTimeOffset})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Decimal})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Double})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int16)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Int16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt16)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int32)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Int32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int32})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTime)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int64})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Single})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Decimal)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int16})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt16})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt32})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt64})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Double)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Double" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Single)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Single" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.String)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.String" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt32)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt64)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte[])~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Byte[]" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.CreateReader">
      <summary>
            Creates an <see cref="T:Newtonsoft.Json.JsonReader" /> for this token.
            </summary>
      <returns>An <see cref="T:Newtonsoft.Json.JsonReader" /> that can be used to read this token and its descendants.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the value of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from an object using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when reading the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the value of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>
            An <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String)">
      <summary>
            Selects the token that matches the object path.
            </summary>
      <param name="path">
            The object path from the current <see cref="T:Newtonsoft.Json.Linq.JToken" /> to the <see cref="T:Newtonsoft.Json.Linq.JToken" />
            to be returned. This must be a string of property names or array indexes separated
            by periods, such as <code>Tables[0].DefaultView[0].Price</code> in C# or
            <code>Tables(0).DefaultView(0).Price</code> in Visual Basic.
            </param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that matches the object path or a null reference if no matching token is found.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String,System.Boolean)">
      <summary>
            Selects the token that matches the object path.
            </summary>
      <param name="path">
            The object path from the current <see cref="T:Newtonsoft.Json.Linq.JToken" /> to the <see cref="T:Newtonsoft.Json.Linq.JToken" />
            to be returned. This must be a string of property names or array indexes separated
            by periods, such as <code>Tables[0].DefaultView[0].Price</code> in C# or
            <code>Tables(0).DefaultView(0).Price</code> in Visual Basic.
            </param>
      <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no token is found.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that matches the object path.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
      <param name="parameter">The expression tree representation of the runtime value.</param>
      <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.DeepClone">
      <summary>
            Creates a new instance of the <see cref="T:Newtonsoft.Json.Linq.JToken" />. All child tokens are recursively cloned.
            </summary>
      <returns>A new instance of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.EqualityComparer">
      <summary>
            Gets a comparer that can compare two tokens for value equality.
            </summary>
      <value>A <see cref="T:Newtonsoft.Json.Linq.JTokenEqualityComparer" /> that can compare two nodes for value equality.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Parent">
      <summary>
            Gets or sets the parent.
            </summary>
      <value>The parent.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Root">
      <summary>
            Gets the root <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The root <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.HasValues">
      <summary>
            Gets a value indicating whether this token has childen tokens.
            </summary>
      <value>
        <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Next">
      <summary>
            Gets the next sibling token of this node.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the next sibling token.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Previous">
      <summary>
            Gets the previous sibling token of this node.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the previous sibling token.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.First">
      <summary>
            Get the first child token of this token.
            </summary>
      <value>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Last">
      <summary>
            Get the last child token of this token.
            </summary>
      <value>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JValue">
      <summary>
            Represents a value in JSON (string, integer, date, etc).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(Newtonsoft.Json.Linq.JValue)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class from another <see cref="T:Newtonsoft.Json.Linq.JValue" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JValue" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.UInt64)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CreateComment(System.String)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> comment with the given value.
            </summary>
      <param name="value">The value.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> comment with the given value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CreateString(System.String)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> string with the given value.
            </summary>
      <param name="value">The value.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> string with the given value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.Equals(Newtonsoft.Json.Linq.JValue)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
      <param name="parameter">The expression tree representation of the runtime value.</param>
      <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.HasValues">
      <summary>
            Gets a value indicating whether this token has childen tokens.
            </summary>
      <value>
        <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.Value">
      <summary>
            Gets or sets the underlying token value.
            </summary>
      <value>The underlying token value.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JRaw">
      <summary>
            Represents a raw JSON string.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(Newtonsoft.Json.Linq.JRaw)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw" /> class from another <see cref="T:Newtonsoft.Json.Linq.JRaw" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JRaw" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw" /> class.
            </summary>
      <param name="rawJson">The raw json.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.Create(Newtonsoft.Json.JsonReader)">
      <summary>
            Creates an instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.
            </summary>
      <param name="reader">The reader.</param>
      <returns>An instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Required">
      <summary>
            Indicating whether a property is required.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.Default">
      <summary>
            The property is not required. The default state.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.AllowNull">
      <summary>
            The property must be defined in JSON but can be a null value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.Always">
      <summary>
            The property must be defined in JSON and cannot be a null value.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.UnderlyingType">
      <summary>
            Gets the underlying type for the contract.
            </summary>
      <value>The underlying type for the contract.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.CreatedType">
      <summary>
            Gets or sets the type created during deserialization.
            </summary>
      <value>The type created during deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.IsReference">
      <summary>
            Gets or sets whether this type contract is serialized as a reference.
            </summary>
      <value>Whether this type contract is serialized as a reference.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.Converter">
      <summary>
            Gets or sets the default <see cref="T:Newtonsoft.Json.JsonConverter" /> for this contract.
            </summary>
      <value>The converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserialized">
      <summary>
            Gets or sets the method called immediately after deserialization of the object.
            </summary>
      <value>The method called immediately after deserialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializing">
      <summary>
            Gets or sets the method called during deserialization of the object.
            </summary>
      <value>The method called during deserialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerialized">
      <summary>
            Gets or sets the method called after serialization of the object graph.
            </summary>
      <value>The method called after serialization of the object graph.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializing">
      <summary>
            Gets or sets the method called before serialization of the object.
            </summary>
      <value>The method called before serialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator">
      <summary>
            Gets or sets the default creator method used to create the object.
            </summary>
      <value>The default creator method used to create the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreatorNonPublic">
      <summary>
            Gets or sets a value indicating whether [default creator non public].
            </summary>
      <value>
        <c>true</c> if the default object creator is non-public; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnError">
      <summary>
            Gets or sets the method called when an error is thrown during the serialization of the object.
            </summary>
      <value>The method called when an error is thrown during the serialization of the object.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonDynamicContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonDynamicContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDynamicContract.Properties">
      <summary>
            Gets the object's properties.
            </summary>
      <value>The object's properties.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonISerializableContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonISerializableContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonISerializableContract.ISerializableCreator">
      <summary>
            Gets or sets the ISerializable object constructor.
            </summary>
      <value>The ISerializable object constructor.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonLinqContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonLinqContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPrimitiveContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IValueProvider">
      <summary>
            Provides methods to get and set values.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DynamicValueProvider">
      <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using dynamic methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.#ctor(System.Reflection.MemberInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DynamicValueProvider" /> class.
            </summary>
      <param name="memberInfo">The member info.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ErrorEventArgs">
      <summary>
            Provides data for the Error event.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ErrorEventArgs.#ctor(System.Object,Newtonsoft.Json.Serialization.ErrorContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ErrorEventArgs" /> class.
            </summary>
      <param name="currentObject">The current object.</param>
      <param name="errorContext">The error context.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.CurrentObject">
      <summary>
            Gets the current object the error event is being raised against.
            </summary>
      <value>The current object the error event is being raised against.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.ErrorContext">
      <summary>
            Gets the error context.
            </summary>
      <value>The error context.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.ComponentModel.JPropertyDescriptor">
      <summary>
            Represents a view of a <see cref="T:Newtonsoft.Json.Linq.JProperty" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.ComponentModel.JPropertyDescriptor.#ctor(System.String,System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.ComponentModel.JPropertyDescriptor" /> class.
            </summary>
      <param name="name">The name.</param>
      <param name="propertyType">Type of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.ComponentModel.JPropertyDescriptor.CanResetValue(System.Object)">
      <summary>
            When overridden in a derived class, returns whether resetting an object changes its value.
            </summary>
      <returns>
            true if resetting the component changes its value; otherwise, false.
            </returns>
      <param name="component">The component to test for reset capability. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.ComponentModel.JPropertyDescriptor.GetValue(System.Object)">
      <summary>
            When overridden in a derived class, gets the current value of the property on a component.
            </summary>
      <returns>
            The value of a property for a given component.
            </returns>
      <param name="component">The component with the property for which to retrieve the value. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.ComponentModel.JPropertyDescriptor.ResetValue(System.Object)">
      <summary>
            When overridden in a derived class, resets the value for this property of the component to the default value.
            </summary>
      <param name="component">The component with the property value that is to be reset to the default value. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.ComponentModel.JPropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>
            When overridden in a derived class, sets the value of the component to a different value.
            </summary>
      <param name="component">The component with the property value that is to be set. 
                            </param>
      <param name="value">The new value. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.ComponentModel.JPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>
            When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
            </summary>
      <returns>
            true if the property should be persisted; otherwise, false.
            </returns>
      <param name="component">The component with the property to be examined for persistence. 
                            </param>
    </member>
    <member name="P:Newtonsoft.Json.Linq.ComponentModel.JPropertyDescriptor.ComponentType">
      <summary>
            When overridden in a derived class, gets the type of the component this property is bound to.
            </summary>
      <returns>
            A <see cref="T:System.Type" /> that represents the type of component this property is bound to. When the <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> or <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> methods are invoked, the object specified might be an instance of this type.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.ComponentModel.JPropertyDescriptor.IsReadOnly">
      <summary>
            When overridden in a derived class, gets a value indicating whether this property is read-only.
            </summary>
      <returns>
            true if the property is read-only; otherwise, false.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.ComponentModel.JPropertyDescriptor.PropertyType">
      <summary>
            When overridden in a derived class, gets the type of the property.
            </summary>
      <returns>
            A <see cref="T:System.Type" /> that represents the type of the property.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.ComponentModel.JPropertyDescriptor.NameHashCode">
      <summary>
            Gets the hash code for the name of the member.
            </summary>
      <value>
      </value>
      <returns>
            The hash code for the name of the member.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IReferenceResolver">
      <summary>
            Used to resolve references when serializing and deserializing JSON by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.ResolveReference(System.String)">
      <summary>
            Resolves a reference to its object.
            </summary>
      <param name="reference">The reference to resolve.</param>
      <returns>The object that</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.GetReference(System.Object)">
      <summary>
            Gets the reference for the sepecified object.
            </summary>
      <param name="value">The object to get a reference for.</param>
      <returns>The reference to the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.IsReferenced(System.Object)">
      <summary>
            Determines whether the specified object is referenced.
            </summary>
      <param name="value">The object to test for a reference.</param>
      <returns>
        <c>true</c> if the specified object is referenced; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.AddReference(System.String,System.Object)">
      <summary>
            Adds a reference to the specified object.
            </summary>
      <param name="reference">The reference.</param>
      <param name="value">The object to reference.</param>
    </member>
    <member name="T:Newtonsoft.Json.PreserveReferencesHandling">
      <summary>
            Specifies reference handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.None">
      <summary>
            Do not preserve references when serializing types.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Objects">
      <summary>
            Preserve references when serializing into a JSON object structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Arrays">
      <summary>
            Preserve references when serializing into a JSON array structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.All">
      <summary>
            Preserve references when serializing.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonContainerAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Id">
      <summary>
            Gets or sets the id.
            </summary>
      <value>The id.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Title">
      <summary>
            Gets or sets the title.
            </summary>
      <value>The title.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Description">
      <summary>
            Gets or sets the description.
            </summary>
      <value>The description.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.IsReference">
      <summary>
            Gets or sets a value that indicates whether to preserve object reference data.
            </summary>
      <value>
        <c>true</c> to keep object reference; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonArrayAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the collection.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with a flag indicating whether the array can contain null items
            </summary>
      <param name="allowNullItems">A flag indicating whether the array can contain null items.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonArrayAttribute.AllowNullItems">
      <summary>
            Gets or sets a value indicating whether null items are allowed in the collection.
            </summary>
      <value>
        <c>true</c> if null items are allowed in the collection; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.DefaultValueHandling">
      <summary>
            Specifies default value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.Include">
      <summary>
            Include default values when serializing and deserializing objects.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.Ignore">
      <summary>
            Ignore default values when serializing and deserializing objects.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverterAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to use the specified <see cref="T:Newtonsoft.Json.JsonConverter" /> when serializing the member or class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonConverterAttribute" /> class.
            </summary>
      <param name="converterType">Type of the converter.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverterAttribute.ConverterType">
      <summary>
            Gets the type of the converter.
            </summary>
      <value>The type of the converter.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonObjectAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(Newtonsoft.Json.MemberSerialization)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with the specified member serialization.
            </summary>
      <param name="memberSerialization">The member serialization.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonObjectAttribute.MemberSerialization">
      <summary>
            Gets or sets the member serialization.
            </summary>
      <value>The member serialization.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializerSettings">
      <summary>
            Specifies the settings on a <see cref="T:Newtonsoft.Json.JsonSerializer" /> object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializerSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> class.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceLoopHandling">
      <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) is handled.
            </summary>
      <value>Reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.MissingMemberHandling">
      <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
      <value>Missing member handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ObjectCreationHandling">
      <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.NullValueHandling">
      <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            </summary>
      <value>Null value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DefaultValueHandling">
      <summary>
            Gets or sets how null default are handled during serialization and deserialization.
            </summary>
      <value>The default value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Converters">
      <summary>
            Gets or sets a collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.
            </summary>
      <value>The converters.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.PreserveReferencesHandling">
      <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
      <value>The preserve references handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling">
      <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormat">
      <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
      <value>The type name assembly format.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ConstructorHandling">
      <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
      <value>The constructor handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ContractResolver">
      <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
      <value>The contract resolver.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceResolver">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
      <value>The reference resolver.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Binder">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder" /> used by the serializer when resolving type names.
            </summary>
      <value>The binder.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Error">
      <summary>
            Gets or sets the error handler called during serialization and deserialization.
            </summary>
      <value>The error handler called during serialization and deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Context">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used by the serializer when invoking serialization callback methods.
            </summary>
      <value>The context.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonValidatingReader">
      <summary>
            Represents a reader that provides <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> validation.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.#ctor(Newtonsoft.Json.JsonReader)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonValidatingReader" /> class that
            validates the content returned from the given <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from while validating.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Value">
      <summary>
            Gets the text value of the current Json token.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Depth">
      <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
      <value>The depth of the current token in the JSON document.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.QuoteChar">
      <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.TokenType">
      <summary>
            Gets the type of the current Json token.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.ValueType">
      <summary>
            Gets The Common Language Runtime (CLR) type for the current Json token.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Schema">
      <summary>
            Gets or sets the schema.
            </summary>
      <value>The schema.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Reader">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.JsonReader" /> used to construct this <see cref="T:Newtonsoft.Json.JsonValidatingReader" />.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.JsonReader" /> specified in the constructor.</value>
    </member>
    <member name="E:Newtonsoft.Json.JsonValidatingReader.ValidationEventHandler">
      <summary>
            Sets an event handler for receiving schema validation errors.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenEqualityComparer">
      <summary>
            Compares tokens to determine whether they are equal.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.Equals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Determines whether the specified objects are equal.
            </summary>
      <param name="x">The first object of type <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <param name="y">The second object of type <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.GetHashCode(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Returns a hash code for the specified object.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <returns>A hash code for the specified object.</returns>
      <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.</exception>
    </member>
    <member name="T:Newtonsoft.Json.MemberSerialization">
      <summary>
            Specifies the member serialization options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MemberSerialization.OptOut">
      <summary>
            All members are serialized by default. Members can be excluded using the <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MemberSerialization.OptIn">
      <summary>
            Only members must be marked with the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> are serialized.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.ObjectCreationHandling">
      <summary>
            Specifies how object creation is handled by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Auto">
      <summary>
            Reuse existing objects, create new objects when needed.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Reuse">
      <summary>
            Only reuse existing objects.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Replace">
      <summary>
            Always create new objects.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Converters.IsoDateTimeConverter">
      <summary>
            Converts a <see cref="T:System.DateTime" /> to and from the ISO 8601 date format (e.g. 2008-04-12T12:53Z).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeStyles">
      <summary>
            Gets or sets the date time styles used when converting a date to and from JSON.
            </summary>
      <value>The date time styles used when converting a date to and from JSON.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeFormat">
      <summary>
            Gets or sets the date time format used when converting a date to and from JSON.
            </summary>
      <value>The date time format used when converting a date to and from JSON.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.Culture">
      <summary>
            Gets or sets the culture used when converting a date to and from JSON.
            </summary>
      <value>The culture used when converting a date to and from JSON.</value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter">
      <summary>
            Converts a <see cref="T:System.DateTime" /> to and from a JavaScript date constructor (e.g. new Date(52231943)).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing property value of the JSON that is being converted.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.JsonDateTimeSerializationMode">
      <summary>
            Specifies whether a DateTime object represents a local time, a Coordinated Universal Time (UTC), or is not specified as either local time or UTC.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Converters.JsonDateTimeSerializationMode.Local">
      <summary>
            The time represented is local time.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Converters.JsonDateTimeSerializationMode.Utc">
      <summary>
            The time represented is UTC.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Converters.JsonDateTimeSerializationMode.Unspecified">
      <summary>
            The time represented is not specified as either local time or Coordinated Universal Time (UTC).
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Converters.JsonDateTimeSerializationMode.RoundtripKind">
      <summary>
            Preserves the DateTimeKind field of a date when a DateTime object is converted to a string and the string is then converted back to a DateTime object.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Converters.XmlNodeConverter">
      <summary>
            Converts XML to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="serializer">The calling serializer.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(System.String,System.String@)">
      <summary>
            Checks if the attributeName is a namespace attribute.
            </summary>
      <param name="attributeName">Attribute name to test.</param>
      <param name="prefix">The attribute name prefix if it has one, otherwise an empty string.</param>
      <returns>True if attribute name is for a namespace attribute, otherwise false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
      <param name="valueType">Type of the value.</param>
      <returns>
        <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeRootElementName">
      <summary>
            Gets or sets the name of the root element to insert when deserializing to XML if the JSON structure has produces multiple root elements.
            </summary>
      <value>The name of the deserialize root element.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.WriteArrayAttribute">
      <summary>
            Gets or sets a flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </summary>
      <value>
        <c>true</c> if the array attibute is written to the XML; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.OmitRootObject">
      <summary>
            Gets or sets a value indicating whether to write the root JSON object.
            </summary>
      <value>
        <c>true</c> if the JSON root object is omitted; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonTextReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.#ctor(System.IO.TextReader)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader" /> class with the specified <see cref="T:System.IO.TextReader" />.
            </summary>
      <param name="reader">The <c>TextReader</c> containing the XML data to read.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.Close">
      <summary>
            Changes the state to closed. 
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.HasLineInfo">
      <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
      <returns>
        <c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextReader.LineNumber">
      <summary>
            Gets the current line number.
            </summary>
      <value>
            The current line number or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextReader.LinePosition">
      <summary>
            Gets the current line position.
            </summary>
      <value>
            The current line position or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonPropertyAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to always serialize the member with the specified name.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> class with the specified name.
            </summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NullValueHandling">
      <summary>
            Gets or sets the null value handling used when serializing this property.
            </summary>
      <value>The null value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.DefaultValueHandling">
      <summary>
            Gets or sets the default value handling used when serializing this property.
            </summary>
      <value>The default value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ReferenceLoopHandling">
      <summary>
            Gets or sets the reference loop handling used when serializing this property.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ObjectCreationHandling">
      <summary>
            Gets or sets the object creation handling used when deserializing this property.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.TypeNameHandling">
      <summary>
            Gets or sets the type name handling used when serializing this property.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.IsReference">
      <summary>
            Gets or sets whether this property's value is serialized as a reference.
            </summary>
      <value>Whether this property's value is serialized as a reference.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.PropertyName">
      <summary>
            Gets or sets the name of the property.
            </summary>
      <value>The name of the property.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Required">
      <summary>
            Gets or sets a value indicating whether this property is required.
            </summary>
      <value>
            	A value indicating whether this property is required.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonIgnoreAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> not to serialize the public field or public read/write property value.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonTextWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.#ctor(System.IO.TextWriter)">
      <summary>
            Creates an instance of the <c>JsonWriter</c> class using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
      <param name="textWriter">The <c>TextWriter</c> to write to.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the specified end token.
            </summary>
      <param name="token">The end token to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndent">
      <summary>
            Writes indent characters.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueDelimiter">
      <summary>
            Writes the JSON value delimiter.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndentSpace">
      <summary>
            Writes an indent space.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteWhitespace(System.String)">
      <summary>
            Writes out the given white space.
            </summary>
      <param name="ws">The string of white space characters.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.Indentation">
      <summary>
            Gets or sets how many IndentChars to write for each level in the hierarchy when <see cref="T:Newtonsoft.Json.Formatting" /> is set to <c>Formatting.Indented</c>.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteChar">
      <summary>
            Gets or sets which character to use to quote attribute values.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.IndentChar">
      <summary>
            Gets or sets which character to use for indenting when <see cref="T:Newtonsoft.Json.Formatting" /> is set to <c>Formatting.Indented</c>.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteName">
      <summary>
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonWriterException">
      <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:Newtonsoft.Json.JsonReaderException">
      <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonReaderException.LineNumber">
      <summary>
            Gets the line number indicating where the error occurred.
            </summary>
      <value>The line number indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReaderException.LinePosition">
      <summary>
            Gets the line position indicating where the error occurred.
            </summary>
      <value>The line position indicating where the error occurred.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverterCollection">
      <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonConvert">
      <summary>
            Provides methods for converting between common language runtime types and JSON types.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.True">
      <summary>
            Represents JavaScript's boolean value true as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.False">
      <summary>
            Represents JavaScript's boolean value false as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.Null">
      <summary>
            Represents JavaScript's null as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.Undefined">
      <summary>
            Represents JavaScript's undefined as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.PositiveInfinity">
      <summary>
            Represents JavaScript's positive infinity as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.NegativeInfinity">
      <summary>
            Represents JavaScript's negative infinity as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.NaN">
      <summary>
            Represents JavaScript's NaN as a string. This field is read-only.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime)">
      <summary>
            Converts the <see cref="T:System.DateTime" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset)">
      <summary>
            Converts the <see cref="T:System.DateTimeOffset" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Boolean)">
      <summary>
            Converts the <see cref="T:System.Boolean" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Char)">
      <summary>
            Converts the <see cref="T:System.Char" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Char" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Enum)">
      <summary>
            Converts the <see cref="T:System.Enum" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Enum" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int32)">
      <summary>
            Converts the <see cref="T:System.Int32" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int16)">
      <summary>
            Converts the <see cref="T:System.Int16" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt16)">
      <summary>
            Converts the <see cref="T:System.UInt16" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt32)">
      <summary>
            Converts the <see cref="T:System.UInt32" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int64)">
      <summary>
            Converts the <see cref="T:System.Int64" />  to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt64)">
      <summary>
            Converts the <see cref="T:System.UInt64" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Single)">
      <summary>
            Converts the <see cref="T:System.Single" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Double)">
      <summary>
            Converts the <see cref="T:System.Double" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Byte)">
      <summary>
            Converts the <see cref="T:System.Byte" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.SByte)">
      <summary>
            Converts the <see cref="T:System.SByte" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Decimal)">
      <summary>
            Converts the <see cref="T:System.Decimal" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Guid)">
      <summary>
            Converts the <see cref="T:System.Guid" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Guid" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String)">
      <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char)">
      <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="delimter">The string delimiter character.</param>
      <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Object)">
      <summary>
            Converts the <see cref="T:System.Object" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object)">
      <summary>
            Serializes the specified object to a JSON string.
            </summary>
      <param name="value">The object to serialize.</param>
      <returns>A JSON string representation of the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting)">
      <summary>
            Serializes the specified object to a JSON string.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="converters">A collection converters used while serializing.</param>
      <returns>A JSON string representation of the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="converters">A collection converters used while serializing.</param>
      <returns>A JSON string representation of the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String)">
      <summary>
            Deserializes the JSON to a .NET object.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <returns>The deserialized object from the Json string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to a .NET object.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type)">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The <see cref="T:System.Type" /> of object being deserialized.</param>
      <returns>The deserialized object from the Json string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String)">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The JSON to deserialize.</param>
      <returns>The deserialized object from the Json string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0)">
      <summary>
            Deserializes the JSON to the given anonymous type.
            </summary>
      <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            </typeparam>
      <param name="value">The JSON to deserialize.</param>
      <param name="anonymousTypeObject">The anonymous type object.</param>
      <returns>The deserialized anonymous type from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The JSON to deserialize.</param>
      <param name="converters">Converters to use while deserializing.</param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The object to deserialize.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The type of the object to deserialize.</param>
      <param name="converters">Converters to use while deserializing.</param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The type of the object to deserialize to.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object)">
      <summary>
            Populates the object with values from the JSON string.
            </summary>
      <param name="value">The JSON to populate values from.</param>
      <param name="target">The target object to populate values onto.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Populates the object with values from the JSON string.
            </summary>
      <param name="value">The JSON to populate values from.</param>
      <param name="target">The target object to populate values onto.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode)">
      <summary>
            Serializes the XML node to a JSON string.
            </summary>
      <param name="node">The node to serialize.</param>
      <returns>A JSON string of the XmlNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting)">
      <summary>
            Serializes the XML node to a JSON string.
            </summary>
      <param name="node">The node to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <returns>A JSON string of the XmlNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting,System.Boolean)">
      <summary>
            Serializes the XML node to a JSON string.
            </summary>
      <param name="node">The node to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="omitRootObject">Omits writing the root object.</param>
      <returns>A JSON string of the XmlNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String)">
      <summary>
            Deserializes the XmlNode from a JSON string.
            </summary>
      <param name="value">The JSON string.</param>
      <returns>The deserialized XmlNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String)">
      <summary>
            Deserializes the XmlNode from a JSON string nested in a root elment.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <returns>The deserialized XmlNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String,System.Boolean)">
      <summary>
            Deserializes the XmlNode from a JSON string nested in a root elment.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
      <returns>The deserialized XmlNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject)">
      <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string.
            </summary>
      <param name="node">The node to convert to JSON.</param>
      <returns>A JSON string of the XNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting)">
      <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string.
            </summary>
      <param name="node">The node to convert to JSON.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <returns>A JSON string of the XNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting,System.Boolean)">
      <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string.
            </summary>
      <param name="node">The node to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="omitRootObject">Omits writing the root object.</param>
      <returns>A JSON string of the XNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String)">
      <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string.
            </summary>
      <param name="value">The JSON string.</param>
      <returns>The deserialized XNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String)">
      <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string nested in a root elment.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <returns>The deserialized XNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String,System.Boolean)">
      <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string nested in a root elment.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
      <returns>The deserialized XNode</returns>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializationException">
      <summary>
            The exception thrown when an error occurs during Json serialization or deserialization.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializer">
      <summary>
            Serializes and deserializes objects into and from the JSON format.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> enables you to control how objects are encoded into JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializer" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Create(Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="settings">The settings to be applied to the <see cref="T:Newtonsoft.Json.JsonSerializer" />.</param>
      <returns>A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Populate(System.IO.TextReader,System.Object)">
      <summary>
            Populates the JSON values onto the target object.
            </summary>
      <param name="reader">The <see cref="T:System.IO.TextReader" /> that contains the JSON structure to reader values from.</param>
      <param name="target">The target object to populate values onto.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Populate(Newtonsoft.Json.JsonReader,System.Object)">
      <summary>
            Populates the JSON values onto the target object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> that contains the JSON structure to reader values from.</param>
      <param name="target">The target object to populate values onto.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> that contains the JSON structure to deserialize.</param>
      <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:System.IO.StringReader" />
            into an instance of the specified type.
            </summary>
      <param name="reader">The <see cref="T:System.IO.TextReader" /> containing the object.</param>
      <param name="objectType">The <see cref="T:System.Type" /> of object being deserialized.</param>
      <returns>The instance of <paramref name="objectType" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize``1(Newtonsoft.Json.JsonReader)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />
            into an instance of the specified type.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the object.</param>
      <typeparam name="T">The type of the object to deserialize.</typeparam>
      <returns>The instance of <typeparamref name="T" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader,System.Type)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />
            into an instance of the specified type.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the object.</param>
      <param name="objectType">The <see cref="T:System.Type" /> of object being deserialized.</param>
      <returns>The instance of <paramref name="objectType" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the Json structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:Newtonsoft.Json.JsonWriter" />. 
            </summary>
      <param name="jsonWriter">The <see cref="T:Newtonsoft.Json.JsonWriter" /> used to write the Json structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceResolver">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Binder">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder" /> used by the serializer when resolving type names.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling">
      <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameAssemblyFormat">
      <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
      <value>The type name assembly format.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.PreserveReferencesHandling">
      <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceLoopHandling">
      <summary>
            Get or set how reference loops (e.g. a class referencing itself) is handled.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.MissingMemberHandling">
      <summary>
            Get or set how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.NullValueHandling">
      <summary>
            Get or set how null values are handled during serialization and deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DefaultValueHandling">
      <summary>
            Get or set how null default are handled during serialization and deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ObjectCreationHandling">
      <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ConstructorHandling">
      <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
      <value>The constructor handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Converters">
      <summary>
            Gets a collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.
            </summary>
      <value>Collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ContractResolver">
      <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Context">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used by the serializer when invoking serialization callback methods.
            </summary>
      <value>The context.</value>
    </member>
    <member name="E:Newtonsoft.Json.JsonSerializer.Error">
      <summary>
            Occurs when the <see cref="T:Newtonsoft.Json.JsonSerializer" /> errors during serialization and deserialization.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.Extensions">
      <summary>
            Contains the LINQ to JSON extension methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of tokens that contains the ancestors of every token in the source collection.
            </summary>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JToken" />.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the ancestors of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of tokens that contains the descendants of every token in the source collection.
            </summary>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JContainer" />.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the descendants of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Properties(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JObject})">
      <summary>
            Returns a collection of child properties of every object in the source collection.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the properties of every object in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
      <summary>
            Returns a collection of child values of every object in the source collection with the given key.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <param name="key">The token key.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every node in the source collection with the given key.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Returns a collection of child values of every object in the source collection.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
      <summary>
            Returns a collection of converted child values of every object in the source collection with the given key.
            </summary>
      <typeparam name="U">The type to convert the values to.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <param name="key">The token key.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every node in the source collection with the given key.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Returns a collection of converted child values of every object in the source collection.
            </summary>
      <typeparam name="U">The type to convert the values to.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Converts the value.
            </summary>
      <typeparam name="U">The type to convert the value to.</typeparam>
      <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Converts the value.
            </summary>
      <typeparam name="T">The source collection type.</typeparam>
      <typeparam name="U">The type to convert the value to.</typeparam>
      <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Children``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of child tokens of every array in the source collection.
            </summary>
      <typeparam name="T">The source collection type.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Children``2(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of converted child tokens of every array in the source collection.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <typeparam name="U">The type to convert the values to.</typeparam>
      <typeparam name="T">The source collection type.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.
            </summary>
      <typeparam name="T">The source collection type.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JContainer">
      <summary>
            Represents a token that can contain other tokens.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.AddingNew" /> event.
            </summary>
      <param name="e">The <see cref="T:System.ComponentModel.AddingNewEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.ListChanged" /> event.
            </summary>
      <param name="e">The <see cref="T:System.ComponentModel.ListChangedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged" /> event.
            </summary>
      <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Children">
      <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Values``1">
      <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
      <typeparam name="T">The type to convert the values to.</typeparam>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Descendants">
      <summary>
            Returns a collection of the descendant tokens for this token in document order.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the descendant tokens of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Add(System.Object)">
      <summary>
            Adds the specified content as children of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="content">The content to be added.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.AddFirst(System.Object)">
      <summary>
            Adds the specified content as the first children of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="content">The content to be added.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.CreateWriter">
      <summary>
            Creates an <see cref="T:Newtonsoft.Json.JsonWriter" /> that can be used to add tokens to the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <returns>An <see cref="T:Newtonsoft.Json.JsonWriter" /> that is ready to have content written to it.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.ReplaceAll(System.Object)">
      <summary>
            Replaces the children nodes of this token with the specified content.
            </summary>
      <param name="content">The content.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.RemoveAll">
      <summary>
            Removes the child nodes from this token.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.HasValues">
      <summary>
            Gets a value indicating whether this token has childen tokens.
            </summary>
      <value>
        <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.First">
      <summary>
            Get the first child token of this token.
            </summary>
      <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.Last">
      <summary>
            Get the last child token of this token.
            </summary>
      <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </value>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JContainer.ListChanged">
      <summary>
            Occurs when the list changes or an item in the list changes.
            </summary>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JContainer.AddingNew">
      <summary>
            Occurs before an item is added to the collection.
            </summary>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged">
      <summary>
            Occurs when the items list of the collection has changed, or the collection is reset.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JConstructor">
      <summary>
            Represents a JSON constructor.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(Newtonsoft.Json.Linq.JConstructor)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class from another <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name and content.
            </summary>
      <param name="name">The constructor name.</param>
      <param name="content">The contents of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name and content.
            </summary>
      <param name="name">The constructor name.</param>
      <param name="content">The contents of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name.
            </summary>
      <param name="name">The constructor name.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Name">
      <summary>
            Gets or sets the name of this constructor.
            </summary>
      <value>The constructor name.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JEnumerable`1">
      <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
      <typeparam name="T">The type of token</typeparam>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JEnumerable`1.Empty">
      <summary>
            An empty collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> struct.
            </summary>
      <param name="enumerable">The enumerable.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JEnumerable`1.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> with the specified key.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JObject">
      <summary>
            Represents a JSON object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(Newtonsoft.Json.Linq.JObject)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class from another <see cref="T:Newtonsoft.Json.Linq.JObject" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JObject" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class with the specified content.
            </summary>
      <param name="content">The contents of the object.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class with the specified content.
            </summary>
      <param name="content">The contents of the object.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Properties">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1" /> of this object's properties.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of this object's properties.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Property(System.String)">
      <summary>
            Gets a <see cref="T:Newtonsoft.Json.Linq.JProperty" /> the specified name.
            </summary>
      <param name="name">The property name.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> with the specified name or null.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.PropertyValues">
      <summary>
            Gets an <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> of this object's property values.
            </summary>
      <returns>An <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> of this object's property values.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used to read the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Add(System.String,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Adds the specified property name.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Remove(System.String)">
      <summary>
            Removes the property with the specified name.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>true if item was successfully removed; otherwise, false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,Newtonsoft.Json.Linq.JToken@)">
      <summary>
            Tries the get value.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="value">The value.</param>
      <returns>true if a value was successfully retrieved; otherwise, false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanged(System.String)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanged" /> event with the provided arguments.
            </summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanging(System.String)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanging" /> event with the provided arguments.
            </summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
      <param name="parameter">The expression tree representation of the runtime value.</param>
      <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.String)">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <value>
      </value>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanging">
      <summary>
            Occurs when a property value is changing.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JArray">
      <summary>
            Represents a JSON array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(Newtonsoft.Json.Linq.JArray)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class from another <see cref="T:Newtonsoft.Json.Linq.JArray" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JArray" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class with the specified content.
            </summary>
      <param name="content">The contents of the array.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class with the specified content.
            </summary>
      <param name="content">The contents of the array.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used to read the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.IndexOf(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Insert(System.Int32,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.RemoveAt(System.Int32)">
      <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Add(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Clear">
      <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Contains(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Remove(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> at the specified index.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <value>
      </value>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.#ctor(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenReader" /> class.
            </summary>
      <param name="token">The token to read from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor(Newtonsoft.Json.Linq.JContainer)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter" /> class writing to the given <see cref="T:Newtonsoft.Json.Linq.JContainer" />.
            </summary>
      <param name="container">The container being written to.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the end.
            </summary>
      <param name="token">The token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JTokenWriter.Token">
      <summary>
            Gets the token being writen.
            </summary>
      <value>The token being writen.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JProperty">
      <summary>
            Represents a JSON property.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(Newtonsoft.Json.Linq.JProperty)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class from another <see cref="T:Newtonsoft.Json.Linq.JProperty" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.Children">
      <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class.
            </summary>
      <param name="name">The property name.</param>
      <param name="content">The property content.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class.
            </summary>
      <param name="name">The property name.</param>
      <param name="content">The property content.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JProperty" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JProperty" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Name">
      <summary>
            Gets the property name.
            </summary>
      <value>The property name.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Value">
      <summary>
            Gets or sets the property value.
            </summary>
      <value>The property value.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenType">
      <summary>
            Specifies the type of token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.None">
      <summary>
            No token type has been set.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Object">
      <summary>
            A JSON object.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Array">
      <summary>
            A JSON array.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Constructor">
      <summary>
            A JSON constructor.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Property">
      <summary>
            A JSON object property.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Comment">
      <summary>
            A comment.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Integer">
      <summary>
            An integer value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Float">
      <summary>
            A float value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.String">
      <summary>
            A string value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Boolean">
      <summary>
            A boolean value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Null">
      <summary>
            A null value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Undefined">
      <summary>
            An undefined value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Date">
      <summary>
            A date value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Raw">
      <summary>
            A raw JSON value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Bytes">
      <summary>
            A collection of bytes value.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Schema.Extensions">
      <summary>
            Contains the JSON schema extension methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
      <summary>
            Determines whether the <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
      <summary>
            Validates the specified <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,Newtonsoft.Json.Schema.ValidationEventHandler)">
      <summary>
            Validates the specified <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
      <param name="validationEventHandler">The validation event handler.</param>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaException">
      <summary>
            Returns detailed information about the schema exception.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LineNumber">
      <summary>
            Gets the line number indicating where the error occurred.
            </summary>
      <value>The line number indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LinePosition">
      <summary>
            Gets the line position indicating where the error occurred.
            </summary>
      <value>The line position indicating where the error occurred.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaResolver">
      <summary>
            Resolves <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from an id.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(System.String)">
      <summary>
            Gets a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> for the specified id.
            </summary>
      <param name="id">The id.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> for the specified id.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaResolver.LoadedSchemas">
      <summary>
            Gets or sets the loaded schemas.
            </summary>
      <value>The loaded schemas.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling">
      <summary>
            Specifies undefined schema Id handling options for the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaGenerator" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.None">
      <summary>
            Do not infer a schema Id.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseTypeName">
      <summary>
            Use the .NET type name as the schema Id.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseAssemblyQualifiedName">
      <summary>
            Use the assembly qualified .NET type name as the schema Id.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Schema.ValidationEventArgs">
      <summary>
            Returns detailed information related to the <see cref="T:Newtonsoft.Json.Schema.ValidationEventHandler" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Exception">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> associated with the validation event.
            </summary>
      <value>The JsonSchemaException associated with the validation event.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Message">
      <summary>
            Gets the text description corresponding to the validation event.
            </summary>
      <value>The text description.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.ValidationEventHandler">
      <summary>
            Represents the callback method that will handle JSON schema validation events and the <see cref="T:Newtonsoft.Json.Schema.ValidationEventArgs" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IContractResolver">
      <summary>
            Used by <see cref="T:Newtonsoft.Json.JsonSerializer" /> to resolves a <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for a given <see cref="T:System.Type" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IContractResolver.ResolveContract(System.Type)">
      <summary>
            Resolves the contract for a given type.
            </summary>
      <param name="type">The type to resolve a contract for.</param>
      <returns>The contract for a given type.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DefaultContractResolver">
      <summary>
            Used by <see cref="T:Newtonsoft.Json.JsonSerializer" /> to resolves a <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for a given <see cref="T:System.Type" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> class.
            </summary>
      <param name="shareCache">
            If set to <c>true</c> the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> will use a cached shared with other resolvers of the same type.
            Sharing the cache will significantly performance because expensive reflection will only happen once but could cause unexpected
            behavior if different instances of the resolver are suppose to produce different results. When set to false it is highly
            recommended to reuse <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> instances with the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)">
      <summary>
            Resolves the contract for a given type.
            </summary>
      <param name="type">The type to resolve a contract for.</param>
      <returns>The contract for a given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)">
      <summary>
            Gets the serializable members for the type.
            </summary>
      <param name="objectType">The type to get serializable members for.</param>
      <returns>The serializable members for the type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)">
      <summary>
            Resolves the default <see cref="T:Newtonsoft.Json.JsonConverter" /> for the contract.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateISerializableContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDynamicContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)">
      <summary>
            Determines which contract type is created for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
      <summary>
            Creates properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.
            </summary>
      <param name="type">The type to create properties for.</param>
            /// <param name="memberSerialization">The member serialization mode for the type.</param><returns>Properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.</returns></member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
      <summary>
            Creates the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> used by the serializer to get and set values from a member.
            </summary>
      <param name="member">The member.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> used by the serializer to get and set values from a member.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.
            </summary>
      <param name="memberSerialization">The member's parent <see cref="T:Newtonsoft.Json.MemberSerialization" />.</param>
      <param name="member">The member to create a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for.</param>
      <returns>A created <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)">
      <summary>
            Resolves the name of the property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>Name of the property.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DynamicCodeGeneration">
      <summary>
            Gets a value indicating whether members are being get and set using dynamic code generation.
            This value is determined by the runtime permissions available.
            </summary>
      <value>
        <c>true</c> if using dynamic code generation; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags">
      <summary>
            Gets or sets the default members search flags.
            </summary>
      <value>The default members search flags.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers">
      <summary>
            Gets or sets a value indicating whether compiler generated members should be serialized.
            </summary>
      <value>
        <c>true</c> if serialized compiler generated members; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver">
      <summary>
            Resolves member mappings for a type, camel casing property names.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.ResolvePropertyName(System.String)">
      <summary>
            Resolves the name of the property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>The property name camel cased.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DefaultSerializationBinder">
      <summary>
            The default serialization binder used when resolving and loading classes from type names.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(System.String,System.String)">
      <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
      <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object.</param>
      <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object.</param>
      <returns>
            The type of the object the formatter creates a new instance of.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ErrorContext">
      <summary>
            Provides information surrounding an error.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Error">
      <summary>
            Gets or sets the error.
            </summary>
      <value>The error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.OriginalObject">
      <summary>
            Gets the original object that caused the error.
            </summary>
      <value>The original object that caused the error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Member">
      <summary>
            Gets the member that caused the error.
            </summary>
      <value>The member that caused the error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Handled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.ErrorContext" /> is handled.
            </summary>
      <value>
        <c>true</c> if handled; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonArrayContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonArrayContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonDictionaryContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonDictionaryContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonProperty">
      <summary>
            Maps a JSON property to a .NET member.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonProperty.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyName">
      <summary>
            Gets the name of the property.
            </summary>
      <value>The name of the property.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ValueProvider">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> during serialization.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> during serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyType">
      <summary>
            Gets or sets the type of the property.
            </summary>
      <value>The type of the property.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Converter">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.JsonConverter" /> for the property.
            If set this converter takes presidence over the contract converter for the property type.
            </summary>
      <value>The converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Ignored">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is ignored.
            </summary>
      <value>
        <c>true</c> if ignored; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Readable">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is readable.
            </summary>
      <value>
        <c>true</c> if readable; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Writable">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is writable.
            </summary>
      <value>
        <c>true</c> if writable; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.MemberConverter">
      <summary>
            Gets the member converter.
            </summary>
      <value>The member converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValue">
      <summary>
            Gets the default value.
            </summary>
      <value>The default value.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Required">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is required.
            </summary>
      <value>A value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is required.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.IsReference">
      <summary>
            Gets a value indicating whether this property preserves object references.
            </summary>
      <value>
        <c>true</c> if this instance is reference; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.NullValueHandling">
      <summary>
            Gets the property null value handling.
            </summary>
      <value>The null value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValueHandling">
      <summary>
            Gets the property default value handling.
            </summary>
      <value>The default value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ReferenceLoopHandling">
      <summary>
            Gets the property reference loop handling.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ObjectCreationHandling">
      <summary>
            Gets the property object creation handling.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.TypeNameHandling">
      <summary>
            Gets or sets the type name handling.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ShouldSerialize">
      <summary>
            Gets or sets a predicate used to determine whether the property should be serialize.
            </summary>
      <value>A predicate used to determine whether the property should be serialize.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.GetIsSpecified">
      <summary>
            Gets or sets a predicate used to determine whether the property should be serialized.
            </summary>
      <value>A predicate used to determine whether the property should be serialized.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.SetIsSpecified">
      <summary>
            Gets or sets an action used to set whether the property has been deserialized.
            </summary>
      <value>An action used to set whether the property has been deserialized.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonPropertyCollection">
      <summary>
            A collection of <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> objects.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPropertyCollection" /> class.
            </summary>
      <param name="type">The type.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetKeyForItem(Newtonsoft.Json.Serialization.JsonProperty)">
      <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
      <param name="item">The element from which to extract the key.</param>
      <returns>The key for the specified element.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.AddProperty(Newtonsoft.Json.Serialization.JsonProperty)">
      <summary>
            Adds a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> object.
            </summary>
      <param name="property">The property to add to the collection.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetClosestMatchProperty(System.String)">
      <summary>
            Gets the closest matching <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> object.
            First attempts to get an exact case match of propertyName and then
            a case insensitive match.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>A matching property if found.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetProperty(System.String,System.StringComparison)">
      <summary>
            Gets a property by property name.
            </summary>
      <param name="propertyName">The name of the property to get.</param>
      <param name="comparisonType">Type property name string comparison.</param>
      <returns>A matching property if found.</returns>
    </member>
    <member name="T:Newtonsoft.Json.MissingMemberHandling">
      <summary>
            Specifies missing member handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MissingMemberHandling.Ignore">
      <summary>
            Ignore a missing member and do not attempt to deserialize it.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MissingMemberHandling.Error">
      <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException" /> when a missing member is encountered during deserialization.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.NullValueHandling">
      <summary>
            Specifies null value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.NullValueHandling.Include">
      <summary>
            Include null values when serializing and deserializing objects.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.NullValueHandling.Ignore">
      <summary>
            Ignore null values when serializing and deserializing objects.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.ReferenceLoopHandling">
      <summary>
            Specifies reference loop handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Error">
      <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException" /> when a loop is encountered.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Ignore">
      <summary>
            Ignore loop references and do not serialize.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Serialize">
      <summary>
            Serialize loop references.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchema">
      <summary>
            An in-memory representation of a JSON Schema.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader)">
      <summary>
            Reads a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the JSON Schema to read.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> object representing the JSON Schema.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Reads a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the JSON Schema to read.</param>
      <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> to use when resolving schema references.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> object representing the JSON Schema.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from a string that contains schema JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Parses the specified json.
            </summary>
      <param name="json">The json.</param>
      <param name="resolver">The resolver.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter)">
      <summary>
            Writes this schema to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Writes this schema to a <see cref="T:Newtonsoft.Json.JsonWriter" /> using the specified <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="resolver">The resolver used.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Id">
      <summary>
            Gets or sets the id.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Title">
      <summary>
            Gets or sets the title.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Required">
      <summary>
            Gets or sets whether the object is required.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.ReadOnly">
      <summary>
            Gets or sets whether the object is read only.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Hidden">
      <summary>
            Gets or sets whether the object is visible to users.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Transient">
      <summary>
            Gets or sets whether the object is transient.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Description">
      <summary>
            Gets or sets the description of the object.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Type">
      <summary>
            Gets or sets the types of values allowed by the object.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Pattern">
      <summary>
            Gets or sets the pattern.
            </summary>
      <value>The pattern.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumLength">
      <summary>
            Gets or sets the minimum length.
            </summary>
      <value>The minimum length.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumLength">
      <summary>
            Gets or sets the maximum length.
            </summary>
      <value>The maximum length.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.DivisibleBy">
      <summary>
            Gets or sets a number that the value should be divisble by.
            </summary>
      <value>A number that the value should be divisble by.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Minimum">
      <summary>
            Gets or sets the minimum.
            </summary>
      <value>The minimum.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Maximum">
      <summary>
            Gets or sets the maximum.
            </summary>
      <value>The maximum.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMinimum">
      <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "minimum" attribute.
            </summary>
      <value>A flag indicating whether the value can not equal the number defined by the "minimum" attribute.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMaximum">
      <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "maximum" attribute.
            </summary>
      <value>A flag indicating whether the value can not equal the number defined by the "maximum" attribute.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumItems">
      <summary>
            Gets or sets the minimum number of items.
            </summary>
      <value>The minimum number of items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumItems">
      <summary>
            Gets or sets the maximum number of items.
            </summary>
      <value>The maximum number of items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Items">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of items.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Properties">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of properties.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalProperties">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional properties.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.PatternProperties">
      <summary>
            Gets or sets the pattern properties.
            </summary>
      <value>The pattern properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalProperties">
      <summary>
            Gets or sets a value indicating whether additional properties are allowed.
            </summary>
      <value>
        <c>true</c> if additional properties are allowed; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Requires">
      <summary>
            Gets or sets the required property if this property is present.
            </summary>
      <value>The required property if this property is present.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Identity">
      <summary>
            Gets or sets the identity.
            </summary>
      <value>The identity.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Enum">
      <summary>
            Gets or sets the a collection of valid enum values allowed.
            </summary>
      <value>A collection of valid enum values allowed.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Options">
      <summary>
            Gets or sets a collection of options.
            </summary>
      <value>A collection of options.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Disallow">
      <summary>
            Gets or sets disallowed types.
            </summary>
      <value>The disallow types.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Default">
      <summary>
            Gets or sets the default value.
            </summary>
      <value>The default value.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Extends">
      <summary>
            Gets or sets the extend <see cref="T:Newtonsoft.Json.Schema.JsonSchema" />.
            </summary>
      <value>The extended <see cref="T:Newtonsoft.Json.Schema.JsonSchema" />.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Format">
      <summary>
            Gets or sets the format.
            </summary>
      <value>The format.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaGenerator">
      <summary>
            Generates a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from a specified <see cref="T:System.Type" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> used to resolve schema references.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,System.Boolean)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> will be nullable.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver,System.Boolean)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> used to resolve schema references.</param>
      <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> will be nullable.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.UndefinedSchemaIdHandling">
      <summary>
            Gets or sets how undefined schemas are handled by the serializer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.ContractResolver">
      <summary>
            Gets or sets the contract resolver.
            </summary>
      <value>The contract resolver.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaType">
      <summary>
            The value types allowed by the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.None">
      <summary>
            No type specified.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.String">
      <summary>
            String type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Float">
      <summary>
            Float type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Integer">
      <summary>
            Integer type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Boolean">
      <summary>
            Boolean type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Object">
      <summary>
            Object type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Array">
      <summary>
            Array type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Null">
      <summary>
            Null type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Any">
      <summary>
            Any type.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonObjectContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonObjectContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.MemberSerialization">
      <summary>
            Gets or sets the object member serialization.
            </summary>
      <value>The member object serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.Properties">
      <summary>
            Gets the object's properties.
            </summary>
      <value>The object's properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ParametrizedConstructor">
      <summary>
            Gets or sets the parametrized constructor used to create the object.
            </summary>
      <value>The parametrized constructor.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonStringContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonStringContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ReflectionValueProvider">
      <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using reflection.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.#ctor(System.Reflection.MemberInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ReflectionValueProvider" /> class.
            </summary>
      <param name="memberInfo">The member info.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.OnErrorAttribute">
      <summary>
            When applied to a method, specifies that the method is called when an error occurs serializing an object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodWithResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback,Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
      <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic that returns a result
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodReturnLast(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
      <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodNoResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
      <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.GetRestrictions">
      <summary>
            Returns a Restrictions object which includes our current restrictions merged
            with a restriction limiting our type
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ObjectConstructor`1">
      <summary>
            Represents a method that constructs an object.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.TypeNameHandling">
      <summary>
            Specifies type name handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.None">
      <summary>
            Do not include the .NET type name when serializing types.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Objects">
      <summary>
            Include the .NET type name when serializing into a JSON object structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Arrays">
      <summary>
            Include the .NET type name when serializing into a JSON array structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Auto">
      <summary>
            Include the .NET type name when the type of the object being serialized is not the same as its declared type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.All">
      <summary>
            Always include the .NET type name when serializing.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.Convert``1(System.Object)">
      <summary>
            Converts the value to the specified type.
            </summary>
      <typeparam name="T">The type to convert the value to.</typeparam>
      <param name="initialValue">The value to convert.</param>
      <returns>The converted type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.Convert``1(System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts the value to the specified type.
            </summary>
      <typeparam name="T">The type to convert the value to.</typeparam>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <returns>The converted type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.Convert(System.Object,System.Globalization.CultureInfo,System.Type)">
      <summary>
            Converts the value to the specified type.
            </summary>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="targetType">The type to convert the value to.</param>
      <returns>The converted type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.TryConvert``1(System.Object,``0@)">
      <summary>
            Converts the value to the specified type.
            </summary>
      <typeparam name="T">The type to convert the value to.</typeparam>
      <param name="initialValue">The value to convert.</param>
      <param name="convertedValue">The converted value if the conversion was successful or the default value of <c>T</c> if it failed.</param>
      <returns>
        <c>true</c> if <c>initialValue</c> was converted successfully; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.TryConvert``1(System.Object,System.Globalization.CultureInfo,``0@)">
      <summary>
            Converts the value to the specified type.
            </summary>
      <typeparam name="T">The type to convert the value to.</typeparam>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="convertedValue">The converted value if the conversion was successful or the default value of <c>T</c> if it failed.</param>
      <returns>
        <c>true</c> if <c>initialValue</c> was converted successfully; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.TryConvert(System.Object,System.Globalization.CultureInfo,System.Type,System.Object@)">
      <summary>
            Converts the value to the specified type.
            </summary>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="targetType">The type to convert the value to.</param>
      <param name="convertedValue">The converted value if the conversion was successful or the default value of <c>T</c> if it failed.</param>
      <returns>
        <c>true</c> if <c>initialValue</c> was converted successfully; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast``1(System.Object)">
      <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
      <typeparam name="T">The type to convert or cast the value to.</typeparam>
      <param name="initialValue">The value to convert.</param>
      <returns>The converted type. If conversion was unsuccessful, the initial value is returned if assignable to the target type</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast``1(System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
      <typeparam name="T">The type to convert or cast the value to.</typeparam>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <returns>The converted type. If conversion was unsuccessful, the initial value is returned if assignable to the target type</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type)">
      <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="targetType">The type to convert or cast the value to.</param>
      <returns>
            The converted type. If conversion was unsuccessful, the initial value
            is returned if assignable to the target type.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.TryConvertOrCast``1(System.Object,``0@)">
      <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
      <typeparam name="T">The type to convert the value to.</typeparam>
      <param name="initialValue">The value to convert.</param>
      <param name="convertedValue">The converted value if the conversion was successful or the default value of <c>T</c> if it failed.</param>
      <returns>
        <c>true</c> if <c>initialValue</c> was converted successfully or is assignable; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.TryConvertOrCast``1(System.Object,System.Globalization.CultureInfo,``0@)">
      <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
      <typeparam name="T">The type to convert the value to.</typeparam>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="convertedValue">The converted value if the conversion was successful or the default value of <c>T</c> if it failed.</param>
      <returns>
        <c>true</c> if <c>initialValue</c> was converted successfully or is assignable; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.TryConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type,System.Object@)">
      <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="targetType">The type to convert the value to.</param>
      <param name="convertedValue">The converted value if the conversion was successful or the default value of <c>T</c> if it failed.</param>
      <returns>
        <c>true</c> if <c>initialValue</c> was converted successfully or is assignable; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.EnumUtils.Parse``1(System.String)">
      <summary>
            Parses the specified enum member name, returning it's value.
            </summary>
      <param name="enumMemberName">Name of the enum member.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.EnumUtils.Parse``1(System.String,System.Boolean)">
      <summary>
            Parses the specified enum member name, returning it's value.
            </summary>
      <param name="enumMemberName">Name of the enum member.</param>
      <param name="ignoreCase">If set to <c>true</c> ignore case.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1">
      <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``2">
      <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1(System.Type)">
      <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
      <param name="enumType">The enum type to get names and values for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetMaximumValue``1(System.Type)">
      <summary>
            Gets the maximum valid value of an Enum type. Flags enums are ORed.
            </summary>
      <typeparam name="TEnumType">The type of the returned value. Must be assignable from the enum's underlying value type.</typeparam>
      <param name="enumType">The enum type to get the maximum value for.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Newtonsoft.Json.JsonToken">
      <summary>
            Specifies the type of Json token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.None">
      <summary>
            This is returned by the <see cref="T:Newtonsoft.Json.JsonReader" /> if a <see cref="M:Newtonsoft.Json.JsonReader.Read" /> method has not been called. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartObject">
      <summary>
            An object start token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartArray">
      <summary>
            An array start token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartConstructor">
      <summary>
            A constructor start token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.PropertyName">
      <summary>
            An object property name.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Comment">
      <summary>
            A comment.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Raw">
      <summary>
            Raw JSON.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Integer">
      <summary>
            An interger.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Float">
      <summary>
            A float.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.String">
      <summary>
            A string.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Boolean">
      <summary>
            A boolean.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Null">
      <summary>
            A null token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Undefined">
      <summary>
            An undefined token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndObject">
      <summary>
            An object end token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndArray">
      <summary>
            An array end token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndConstructor">
      <summary>
            A constructor end token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Date">
      <summary>
            A Date.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Bytes">
      <summary>
            Byte data.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.WriteState">
      <summary>
            Specifies the state of the <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Error">
      <summary>
            An exception has been thrown, which has left the <see cref="T:Newtonsoft.Json.JsonWriter" /> in an invalid state.
            You may call the <see cref="M:Newtonsoft.Json.JsonWriter.Close" /> method to put the <see cref="T:Newtonsoft.Json.JsonWriter" /> in the <c>Closed</c> state.
            Any other <see cref="T:Newtonsoft.Json.JsonWriter" /> method calls results in an <see cref="T:System.InvalidOperationException" /> being thrown. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Closed">
      <summary>
            The <see cref="M:Newtonsoft.Json.JsonWriter.Close" /> method has been called. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Object">
      <summary>
            An object is being written. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Array">
      <summary>
            A array is being written.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Constructor">
      <summary>
            A constructor is being written.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Property">
      <summary>
            A property is being written.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Start">
      <summary>
            A write method has not been called.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Formatting">
      <summary>
            Specifies formatting options for the <see cref="T:Newtonsoft.Json.JsonTextWriter" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Formatting.None">
      <summary>
            No special formatting is applied. This is the default.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Formatting.Indented">
      <summary>
            Causes child objects to be indented according to the <see cref="P:Newtonsoft.Json.JsonTextWriter.Indentation" /> and <see cref="P:Newtonsoft.Json.JsonTextWriter.IndentChar" /> settings.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Utilities.StringBuffer">
      <summary>
            Builds a string. Unlike StringBuilder this class lets you reuse it's internal buffer.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty(System.Collections.ICollection)">
      <summary>
            Determines whether the collection is null or empty.
            </summary>
      <param name="collection">The collection.</param>
      <returns>
        <c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
      <summary>
            Determines whether the collection is null or empty.
            </summary>
      <param name="collection">The collection.</param>
      <returns>
        <c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmptyOrDefault``1(System.Collections.Generic.IList{``0})">
      <summary>
            Determines whether the collection is null, empty or its contents are uninitialized values.
            </summary>
      <param name="list">The list.</param>
      <returns>
        <c>true</c> if the collection is null or empty or its contents are uninitialized values; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.Slice``1(System.Collections.Generic.IList{``0},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>
            Makes a slice of the specified list in between the start and end indexes.
            </summary>
      <param name="list">The list.</param>
      <param name="start">The start index.</param>
      <param name="end">The end index.</param>
      <returns>A slice of the list.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.Slice``1(System.Collections.Generic.IList{``0},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>
            Makes a slice of the specified list in between the start and end indexes,
            getting every so many items based upon the step.
            </summary>
      <param name="list">The list.</param>
      <param name="start">The start index.</param>
      <param name="end">The end index.</param>
      <param name="step">The step.</param>
      <returns>A slice of the list.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.GroupBy``2(System.Collections.Generic.ICollection{``1},System.Func{``1,``0})">
      <summary>
            Group the collection using a function which returns the key.
            </summary>
      <param name="source">The source collection to group.</param>
      <param name="keySelector">The key selector.</param>
      <returns>A Dictionary with each key relating to a list of objects in a list grouped under it.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Adds the elements of the specified collection to the specified generic IList.
            </summary>
      <param name="initial">The list to add to.</param>
      <param name="collection">The collection of elements to add.</param>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)">
      <summary>
            Gets the type of the typed collection's items.
            </summary>
      <param name="type">The type.</param>
      <returns>The type of the typed collection's items.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.ItemsUnitializedValue``1(System.Collections.Generic.IList{``0})">
      <summary>
            Tests whether the list's items are their unitialized value.
            </summary>
      <param name="list">The list.</param>
      <returns>Whether the list's items are their unitialized value</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
      <summary>
            Gets the member's underlying type.
            </summary>
      <param name="member">The member.</param>
      <returns>The underlying type of the member.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
      <summary>
            Determines whether the member is an indexed property.
            </summary>
      <param name="member">The member.</param>
      <returns>
        <c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
      <summary>
            Determines whether the property is an indexed property.
            </summary>
      <param name="property">The property.</param>
      <returns>
        <c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
      <summary>
            Gets the member's value on the object.
            </summary>
      <param name="member">The member.</param>
      <param name="target">The target object.</param>
      <returns>The member's value on the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
      <summary>
            Sets the member's value on the target object.
            </summary>
      <param name="member">The member.</param>
      <param name="target">The target.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo,System.Boolean)">
      <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
      <param name="member">The MemberInfo to determine whether can be read.</param>
            /// <param name="nonPublic">if set to <c>true</c> then allow the member to be gotten non-publicly.</param><returns><c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns></member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo,System.Boolean)">
      <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
      <param name="member">The MemberInfo to determine whether can be set.</param>
      <param name="nonPublic">if set to <c>true</c> then allow the member to be set non-publicly.</param>
      <returns>
        <c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.ContainsWhiteSpace(System.String)">
      <summary>
            Determines whether the string contains white space.
            </summary>
      <param name="s">The string to test for white space.</param>
      <returns>
        <c>true</c> if the string contains white space; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
      <summary>
            Determines whether the string is all white space. Empty string will return false.
            </summary>
      <param name="s">The string to test whether it is all white space.</param>
      <returns>
        <c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.EnsureEndsWith(System.String,System.String)">
      <summary>
            Ensures the target string ends with the specified string.
            </summary>
      <param name="target">The target.</param>
      <param name="value">The value.</param>
      <returns>The target string with the value string at the end.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.IfNotNullOrEmpty(System.String,System.Action{System.String})">
      <summary>
            Perform an action if the string is not null or empty.
            </summary>
      <param name="value">The value.</param>
      <param name="action">The action to perform.</param>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.Indent(System.String,System.Int32)">
      <summary>
            Indents the specified string.
            </summary>
      <param name="s">The string to indent.</param>
      <param name="indentation">The number of characters to indent by.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.Indent(System.String,System.Int32,System.Char)">
      <summary>
            Indents the specified string.
            </summary>
      <param name="s">The string to indent.</param>
      <param name="indentation">The number of characters to indent by.</param>
      <param name="indentChar">The indent character.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.NumberLines(System.String)">
      <summary>
            Numbers the lines.
            </summary>
      <param name="s">The string to number.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.NullEmptyString(System.String)">
      <summary>
            Nulls an empty string.
            </summary>
      <param name="s">The string.</param>
      <returns>Null if the string was null, otherwise the string unchanged.</returns>
    </member>
    <member name="T:ProtoBuf.IExtensible">
      <summary>
            Indicates that the implementing type has support for protocol-buffer
            <see cref="T:ProtoBuf.IExtension">extensions</see>.
            </summary>
      <remarks>Can be implemented by deriving from <see cref="T:ProtoBuf.Extensible" />.</remarks>
    </member>
    <member name="M:ProtoBuf.IExtensible.GetExtensionObject(System.Boolean)">
      <summary>
            Retrieves the <see cref="T:ProtoBuf.IExtension">extension</see> object for the current
            instance, optionally creating it if it does not already exist.
            </summary>
      <param name="createIfMissing">Should a new extension object be
            created if it does not already exist?</param>
      <returns>The extension object if it exists (or was created), or null
            if the extension object does not exist or is not available.</returns>
      <remarks>The <c>createIfMissing</c> argument is false during serialization,
            and true during deserialization upon encountering unexpected fields.</remarks>
    </member>
    <member name="T:ProtoBuf.Extensible">
      <summary>
            Simple base class for supporting unexpected fields allowing
            for loss-less round-tips/merge, even if the data is not understod.
            The additional fields are (by default) stored in-memory in a buffer.
            </summary>
      <remarks>As an example of an alternative implementation, you might
            choose to use the file system (temporary files) as the back-end, tracking
            only the paths [such an object would ideally be IDisposable and use
            a finalizer to ensure that the files are removed].</remarks>
      <seealso cref="T:ProtoBuf.IExtensible" />
    </member>
    <member name="M:ProtoBuf.Extensible.GetExtensionObject(System.Boolean)">
      <summary>
            Retrieves the <see cref="T:ProtoBuf.IExtension">extension</see> object for the current
            instance, optionally creating it if it does not already exist.
            </summary>
      <param name="createIfMissing">Should a new extension object be
            created if it does not already exist?</param>
      <returns>The extension object if it exists (or was created), or null
            if the extension object does not exist or is not available.</returns>
      <remarks>The <c>createIfMissing</c> argument is false during serialization,
            and true during deserialization upon encountering unexpected fields.</remarks>
    </member>
    <member name="M:ProtoBuf.Extensible.GetExtensionObject(ProtoBuf.IExtension@,System.Boolean)">
      <summary>
            Provides a simple, default implementation for <see cref="T:ProtoBuf.IExtension">extension</see> support,
            optionally creating it if it does not already exist. Designed to be called by
            classes implementing <see cref="T:ProtoBuf.IExtensible" />.
            </summary>
      <param name="createIfMissing">Should a new extension object be
            created if it does not already exist?</param>
      <param name="extensionObject">The extension field to check (and possibly update).</param>
      <returns>The extension object if it exists (or was created), or null
            if the extension object does not exist or is not available.</returns>
      <remarks>The <c>createIfMissing</c> argument is false during serialization,
            and true during deserialization upon encountering unexpected fields.</remarks>
    </member>
    <member name="M:ProtoBuf.Extensible.AppendValue``1(ProtoBuf.IExtensible,System.Int32,``0)">
      <summary>
            Appends the value as an additional (unexpected) data-field for the instance.
            Note that for non-repeated sub-objects, this equates to a merge operation;
            for repeated sub-objects this adds a new instance to the set; for simple
            values the new value supercedes the old value.
            </summary>
      <remarks>Note that appending a value does not remove the old value from
            the stream; avoid repeatedly appending values for the same field.</remarks>
      <typeparam name="TValue">The type of the value to append.</typeparam>
      <param name="instance">The extensible object to append the value to.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <param name="value">The value to append.</param>
    </member>
    <member name="M:ProtoBuf.Extensible.AppendValue``1(ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat,``0)">
      <summary>
            Appends the value as an additional (unexpected) data-field for the instance.
            Note that for non-repeated sub-objects, this equates to a merge operation;
            for repeated sub-objects this adds a new instance to the set; for simple
            values the new value supercedes the old value.
            </summary>
      <remarks>Note that appending a value does not remove the old value from
            the stream; avoid repeatedly appending values for the same field.</remarks>
      <typeparam name="TValue">The data-type of the field.</typeparam>
      <param name="format">The data-format to use when encoding the value.</param>
      <param name="instance">The extensible object to append the value to.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <param name="value">The value to append.</param>
    </member>
    <member name="M:ProtoBuf.Extensible.GetValue``1(ProtoBuf.IExtensible,System.Int32)">
      <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            The value returned is the composed value after merging any duplicated content; if the
            value is "repeated" (a list), then use GetValues instead.
            </summary>
      <typeparam name="TValue">The data-type of the field.</typeparam>
      <param name="instance">The extensible object to obtain the value from.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <returns>The effective value of the field, or the default value if not found.</returns>
    </member>
    <member name="M:ProtoBuf.Extensible.GetValue``1(ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat)">
      <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            The value returned is the composed value after merging any duplicated content; if the
            value is "repeated" (a list), then use GetValues instead.
            </summary>
      <typeparam name="TValue">The data-type of the field.</typeparam>
      <param name="instance">The extensible object to obtain the value from.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <param name="format">The data-format to use when decoding the value.</param>
      <returns>The effective value of the field, or the default value if not found.</returns>
    </member>
    <member name="M:ProtoBuf.Extensible.TryGetValue``1(ProtoBuf.IExtensible,System.Int32,``0@)">
      <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            The value returned (in "value") is the composed value after merging any duplicated content;
            if the value is "repeated" (a list), then use GetValues instead.
            </summary>
      <typeparam name="TValue">The data-type of the field.</typeparam>
      <param name="value">The effective value of the field, or the default value if not found.</param>
      <param name="instance">The extensible object to obtain the value from.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <returns>True if data for the field was present, false otherwise.</returns>
    </member>
    <member name="M:ProtoBuf.Extensible.TryGetValue``1(ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat,``0@)">
      <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            The value returned (in "value") is the composed value after merging any duplicated content;
            if the value is "repeated" (a list), then use GetValues instead.
            </summary>
      <typeparam name="TValue">The data-type of the field.</typeparam>
      <param name="value">The effective value of the field, or the default value if not found.</param>
      <param name="instance">The extensible object to obtain the value from.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <param name="format">The data-format to use when decoding the value.</param>
      <returns>True if data for the field was present, false otherwise.</returns>
    </member>
    <member name="M:ProtoBuf.Extensible.TryGetValue``1(ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat,System.Boolean,``0@)">
      <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            The value returned (in "value") is the composed value after merging any duplicated content;
            if the value is "repeated" (a list), then use GetValues instead.
            </summary>
      <typeparam name="TValue">The data-type of the field.</typeparam>
      <param name="value">The effective value of the field, or the default value if not found.</param>
      <param name="instance">The extensible object to obtain the value from.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <param name="format">The data-format to use when decoding the value.</param>
      <param name="allowDefinedTag">Allow tags that are present as part of the definition; for example, to query unknown enum values.</param>
      <returns>True if data for the field was present, false otherwise.</returns>
    </member>
    <member name="M:ProtoBuf.Extensible.GetValues``1(ProtoBuf.IExtensible,System.Int32)">
      <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            Each occurrence of the field is yielded separately, making this usage suitable for "repeated"
            (list) fields.
            </summary>
      <remarks>The extended data is processed lazily as the enumerator is iterated.</remarks>
      <typeparam name="TValue">The data-type of the field.</typeparam>
      <param name="instance">The extensible object to obtain the value from.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <returns>An enumerator that yields each occurrence of the field.</returns>
    </member>
    <member name="M:ProtoBuf.Extensible.GetValues``1(ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat)">
      <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            Each occurrence of the field is yielded separately, making this usage suitable for "repeated"
            (list) fields.
            </summary>
      <remarks>The extended data is processed lazily as the enumerator is iterated.</remarks>
      <typeparam name="TValue">The data-type of the field.</typeparam>
      <param name="instance">The extensible object to obtain the value from.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <param name="format">The data-format to use when decoding the value.</param>
      <returns>An enumerator that yields each occurrence of the field.</returns>
    </member>
    <member name="T:ProtoBuf.Serializer">
      <summary>
            Provides protocol-buffer serialization capability for concrete, attributed types. 
            </summary>
      <remarks>
            Protocol-buffer serialization is a compact binary format, designed to take
            advantage of sparse data and knowledge of specific data types; it is also
            extensible, allowing a type to be deserialized / merged even if some data is
            not recognised.
            </remarks>
    </member>
    <member name="T:ProtoBuf.Serializer.GlobalOptions">
      <summary>
            Global switches that change the behavior of protobuf-net
            </summary>
    </member>
    <member name="P:ProtoBuf.Serializer.GlobalOptions.InferTagFromName">
      <summary>
            Global default for that
            enables/disables automatic tag generation based on the existing name / order
            of the defined members. See <seealso cref="P:ProtoBuf.ProtoContractAttribute.InferTagFromName" />
            for usage and <b>important warning</b> / explanation.
            You must set the global default before attempting to serialize/deserialize any
            impacted type.
            </summary>
    </member>
    <member name="T:ProtoBuf.Serializer.NonGeneric">
      <summary>
            Provides non-generic, reflection-based access to Serializer functionality
            </summary>
    </member>
    <member name="M:ProtoBuf.Serializer.NonGeneric.SerializeWithLengthPrefix(System.IO.Stream,System.Object,ProtoBuf.PrefixStyle,System.Int32)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream.
            </summary>
      <param name="instance">The existing instance to be serialized (cannot be null).</param>
      <param name="style">How to encode the length prefix.</param>
      <param name="destination">The destination stream to write to.</param>
      <param name="tag">The tag used as a prefix to each record (only used with base-128 style prefixes).</param>
    </member>
    <member name="M:ProtoBuf.Serializer.NonGeneric.CanSerialize(System.Type)">
      <summary>
            Can the given type be meaningfully with protobuf-net?
            </summary>
    </member>
    <member name="M:ProtoBuf.Serializer.NonGeneric.Serialize(System.IO.Stream,System.Object)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream.
            </summary>
      <param name="instance">The existing instance to be serialized (cannot be null).</param>
      <param name="destination">The destination stream to write to.</param>
    </member>
    <member name="M:ProtoBuf.Serializer.NonGeneric.TryDeserializeWithLengthPrefix(System.IO.Stream,ProtoBuf.PrefixStyle,ProtoBuf.Getter{System.Int32,System.Type},System.Object@)">
      <summary>
            Deserialize object of unknown types from in input stream.
            </summary>
      <param name="source">The input stream.</param>
      <param name="style">The prefix style used to encode the lengths.</param>
      <param name="typeReader">The caller must provide a mechanism to resolve a Type from
            the tags encountered in the stream. If the delegate returns null, then the instance
            is skipped - otherwise, the object is deserialized according to type.</param>
      <param name="item">The deserialized instance, or null if the stream terminated.</param>
      <returns>True if an object was idenfified; false if the stream terminated. Note
            that unexpected types are skipped.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.NonGeneric.Deserialize(System.Type,System.IO.Stream)">
      <summary>
            Creates a new instance from a protocol-buffer stream
            </summary>
      <param name="type">The type to be created.</param>
      <param name="source">The binary stream to apply to the new instance (cannot be null).</param>
      <returns>A new, initialized instance.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.NonGeneric.DeepClone(System.Object)">
      <summary>
            Create a deep clone of the supplied instance; any sub-items are also cloned.
            </summary>
      <param name="instance">The existing instance to be cloned.</param>
      <returns>A new copy, cloned from the supplied instance.</returns>
    </member>
    <member name="F:ProtoBuf.Serializer.ListItemTag">
      <summary>
            The implicit tag used when serializing lists and other enumerable data.
            </summary>
    </member>
    <member name="M:ProtoBuf.Serializer.TryGetTag(System.Reflection.MemberInfo,System.Int32@,System.String@,ProtoBuf.DataFormat@,ProtoBuf.MemberSerializationOptions@)">
      <summary>
            Supports various different property metadata patterns:
            [ProtoMember] is the most specific, allowing the data-format to be set.
            [DataMember], [XmlElement] are supported for compatibility.
            In any event, there must be a unique positive Tag/Order.
            </summary>
    </member>
    <member name="M:ProtoBuf.Serializer.Deserialize``1(System.IO.Stream)">
      <summary>
            Creates a new instance from a protocol-buffer stream
            </summary>
      <typeparam name="T">The type to be created.</typeparam>
      <param name="source">The binary stream to apply to the new instance (cannot be null).</param>
      <returns>A new, initialized instance.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.DeserializeWithLengthPrefix``1(System.IO.Stream)">
      <summary>
            Creates a new instance from a protocol-buffer stream that has a length-prefix
            on data (to assist with network IO).
            </summary>
      <typeparam name="T">The type to be created.</typeparam>
      <param name="source">The binary stream to apply to the new instance (cannot be null).</param>
      <returns>A new, initialized instance.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.DeserializeItems``1(System.IO.Stream,ProtoBuf.PrefixStyle,System.Int32)">
      <summary>
            Reads a sequence of consecutive length-prefixed items from a stream, using
            either base-128 or fixed-length prefixes. Base-128 prefixes with a tag
            are directly comparable to serializing multiple items in succession
            (use the <see cref="F:ProtoBuf.Serializer.ListItemTag" /> tag to emulate the implicit behavior
            when serializing a list/array). When a tag is
            specified, any records with different tags are silently omitted. The
            tag is ignored. The tag is ignores for fixed-length prefixes.
            </summary>
      <typeparam name="T">The type of object to deserialize.</typeparam>
      <param name="source">The binary stream containing the serialized records.</param>
      <param name="style">The prefix style used in the data.</param>
      <param name="tag">The tag of records to return (if non-positive, then no tag is
            expected and all records are returned).</param>
      <returns>The sequence of deserialized objects.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.DeserializeWithLengthPrefix``1(System.IO.Stream,ProtoBuf.PrefixStyle)">
      <summary>
            Creates a new instance from a protocol-buffer stream that has a length-prefix
            on data (to assist with network IO).
            </summary>
      <typeparam name="T">The type to be created.</typeparam>
      <param name="source">The binary stream to apply to the new instance (cannot be null).</param>
      <param name="style">How to encode the length prefix.</param>
      <returns>A new, initialized instance.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.DeserializeWithLengthPrefix``1(System.IO.Stream,ProtoBuf.PrefixStyle,System.Int32)">
      <summary>
            Creates a new instance from a protocol-buffer stream that has a length-prefix
            on data (to assist with network IO).
            </summary>
      <typeparam name="T">The type to be created.</typeparam>
      <param name="source">The binary stream to apply to the new instance (cannot be null).</param>
      <param name="style">How to encode the length prefix.</param>
      <param name="tag">The expected tag of the item (only used with base-128 prefix style).</param>
      <returns>A new, initialized instance.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.TryReadLengthPrefix(System.IO.Stream,ProtoBuf.PrefixStyle,System.Int32@)">
      <summary>Indicates the number of bytes expected for the next message.</summary>
      <param name="source">The stream containing the data to investigate for a length.</param>
      <param name="style">The algorithm used to encode the length.</param>
      <param name="length">The length of the message, if it could be identified.</param>
      <returns>True if a length could be obtained, false otherwise.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.TryReadLengthPrefix(System.Byte[],System.Int32,System.Int32,ProtoBuf.PrefixStyle,System.Int32@)">
      <summary>Indicates the number of bytes expected for the next message.</summary>
      <param name="buffer">The buffer containing the data to investigate for a length.</param>
      <param name="index">The offset of the first byte to read from the buffer.</param>
      <param name="count">The number of bytes to read from the buffer.</param>
      <param name="style">The algorithm used to encode the length.</param>
      <param name="length">The length of the message, if it could be identified.</param>
      <returns>True if a length could be obtained, false otherwise.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.Merge``1(System.IO.Stream,``0)">
      <summary>
            Applies a protocol-buffer stream to an existing instance.
            </summary>
      <typeparam name="T">The type being merged.</typeparam>
      <param name="instance">The existing instance to be modified (can be null).</param>
      <param name="source">The binary stream to apply to the instance (cannot be null).</param>
      <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.MergeWithLengthPrefix``1(System.IO.Stream,``0)">
      <summary>
            Applies a protocol-buffer stream to an existing instance, using length-prefixed
            data - useful with network IO.
            </summary>
      <typeparam name="T">The type being merged.</typeparam>
      <param name="instance">The existing instance to be modified (can be null).</param>
      <param name="source">The binary stream to apply to the instance (cannot be null).</param>
      <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.MergeWithLengthPrefix``1(System.IO.Stream,``0,ProtoBuf.PrefixStyle)">
      <summary>
            Applies a protocol-buffer stream to an existing instance, using length-prefixed
            data - useful with network IO.
            </summary>
      <typeparam name="T">The type being merged.</typeparam>
      <param name="instance">The existing instance to be modified (can be null).</param>
      <param name="source">The binary stream to apply to the instance (cannot be null).</param>
      <param name="style">How to encode the length prefix.</param>
      <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.Serialize``1(System.IO.Stream,``0)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream.
            </summary>
      <typeparam name="T">The type being serialized.</typeparam>
      <param name="instance">The existing instance to be serialized (cannot be null).</param>
      <param name="destination">The destination stream to write to.</param>
    </member>
    <member name="M:ProtoBuf.Serializer.SerializeWithLengthPrefix``1(System.IO.Stream,``0)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream,
            with a length-prefix. This is useful for socket programming,
            as DeserializeWithLengthPrefix/MergeWithLengthPrefix can be used to read the single object back
            from an ongoing stream.
            </summary>
      <typeparam name="T">The type being serialized.</typeparam>
      <param name="instance">The existing instance to be serialized (cannot be null).</param>
      <param name="destination">The destination stream to write to.</param>
    </member>
    <member name="M:ProtoBuf.Serializer.SerializeWithLengthPrefix``1(System.IO.Stream,``0,ProtoBuf.PrefixStyle)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream,
            with a length-prefix. This is useful for socket programming,
            as DeserializeWithLengthPrefix/MergeWithLengthPrefix can be used to read the single object back
            from an ongoing stream.
            </summary>
      <typeparam name="T">The type being serialized.</typeparam>
      <param name="instance">The existing instance to be serialized (cannot be null).</param>
      <param name="style">How to encode the length prefix.</param>
      <param name="destination">The destination stream to write to.</param>
    </member>
    <member name="M:ProtoBuf.Serializer.SerializeWithLengthPrefix``1(System.IO.Stream,``0,ProtoBuf.PrefixStyle,System.Int32)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream,
            with a length-prefix. This is useful for socket programming,
            as DeserializeWithLengthPrefix/MergeWithLengthPrefix can be used to read the single object back
            from an ongoing stream.
            </summary>
      <typeparam name="T">The type being serialized.</typeparam>
      <param name="instance">The existing instance to be serialized (cannot be null).</param>
      <param name="style">How to encode the length prefix.</param>
      <param name="destination">The destination stream to write to.</param>
      <param name="tag">The tag used as a prefix to each record (only used with base-128 style prefixes).</param>
    </member>
    <member name="M:ProtoBuf.Serializer.CreateFormatter``1">
      <summary>
            Creates a new IFormatter that uses protocol-buffer [de]serialization.
            </summary>
      <typeparam name="T">The type of object to be [de]deserialized by the formatter.</typeparam>
      <returns>A new IFormatter to be used during [de]serialization.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.Serialize``1(System.Runtime.Serialization.SerializationInfo,``0)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied SerializationInfo.
            </summary>
      <typeparam name="T">The type being serialized.</typeparam>
      <param name="instance">The existing instance to be serialized (cannot be null).</param>
      <param name="info">The destination SerializationInfo to write to.</param>
    </member>
    <member name="M:ProtoBuf.Serializer.Merge``1(System.Runtime.Serialization.SerializationInfo,``0)">
      <summary>
            Applies a protocol-buffer from a SerializationInfo to an existing instance.
            </summary>
      <typeparam name="T">The type being merged.</typeparam>
      <param name="instance">The existing instance to be modified (cannot be null).</param>
      <param name="info">The SerializationInfo containing the data to apply to the instance (cannot be null).</param>
    </member>
    <member name="M:ProtoBuf.Serializer.Serialize``1(System.Xml.XmlWriter,``0)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied XmlWriter.
            </summary>
      <typeparam name="T">The type being serialized.</typeparam>
      <param name="instance">The existing instance to be serialized (cannot be null).</param>
      <param name="writer">The destination XmlWriter to write to.</param>
    </member>
    <member name="M:ProtoBuf.Serializer.Merge``1(System.Xml.XmlReader,``0)">
      <summary>
            Applies a protocol-buffer from an XmlReader to an existing instance.
            </summary>
      <typeparam name="T">The type being merged.</typeparam>
      <param name="instance">The existing instance to be modified (cannot be null).</param>
      <param name="reader">The XmlReader containing the data to apply to the instance (cannot be null).</param>
    </member>
    <member name="M:ProtoBuf.Serializer.DeepClone``1(``0)">
      <summary>
            Create a deep clone of the supplied instance; any sub-items are also cloned.
            </summary>
      <typeparam name="T">The type being cloned.</typeparam>
      <param name="instance">The existing instance to be cloned.</param>
      <returns>A new copy, cloned from the supplied instance.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.ChangeType``2(``0)">
      <summary>
            Serializes a given instance and deserializes it as a different type;
            this can be used to translate between wire-compatible objects (where
            two .NET types represent the same data), or to promote/demote a type
            through an inheritance hierarchy.
            </summary>
      <remarks>No assumption of compatibility is made between the types.</remarks>
      <typeparam name="TOldType">The type of the object being copied.</typeparam>
      <typeparam name="TNewType">The type of the new object to be created.</typeparam>
      <param name="instance">The existing instance to use as a template.</param>
      <returns>A new instane of type TNewType, with the data from TOldType.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.ChangeType``2(``0,ProtoBuf.SerializationContext)">
      <summary>
            As per the public ChangeType, but allows for workspace-sharing to reduce buffer overhead.
            </summary>
    </member>
    <member name="M:ProtoBuf.Serializer.GetProto``1">
      <summary>
            Suggest a .proto definition for the given type
            </summary>
      <typeparam name="T">The type to generate a .proto definition for</typeparam>
      <returns>The .proto definition as a string</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.PrepareSerializer``1">
      <summary>
            Ensures that the serialization algorithm has been prepared for
            the given type; this can be useful in highly threaded code to
            ensure that all types are ready ahead of time, avoiding deadlock
            scenarios.
            </summary>
      <typeparam name="T">The object type to prepare.</typeparam>
    </member>
    <member name="F:ProtoBuf.StreamState.Normal">
      <summary>
            Indicates that an EOF is not anticipated, and so will throw an exception.
            </summary>
    </member>
    <member name="F:ProtoBuf.StreamState.EofExpected">
      <summary>
            Indicates that an EOF is acceptable at the current time and will
            not throw an exception.
            </summary>
    </member>
    <member name="F:ProtoBuf.StreamState.Peeked">
      <summary>
            Indicates that we have previously obtained a field value from
            the stream that should be consumed next.
            </summary>
    </member>
    <member name="F:ProtoBuf.StreamState.Eof">
      <summary>
            Indicates that we have found the end of the stream; this is **only**
            used to commicate to "Try", and should not persist.
            </summary>
    </member>
    <member name="M:ProtoBuf.SerializationContext.Push(System.Object)">
      <summary>
            Allows for recursion detection by capturing
            the call tree; this only takes effect after
            an initial threshold call-depth is reached.
            If the object is already in the call-tree,
            an exception is thrown.
            </summary>
      <param name="obj">The item being processed (start).</param>
    </member>
    <member name="M:ProtoBuf.SerializationContext.Push">
      <summary>
            Only used during debugging for the text nest-level
            </summary>
    </member>
    <member name="M:ProtoBuf.SerializationContext.Pop">
      <summary>
            Only used during debugging for the text nest-level
            </summary>
    </member>
    <member name="M:ProtoBuf.SerializationContext.Pop(System.Object)">
      <summary>
            Removes an object from the call-tree.
            </summary>
      <remarks>The object is not checked for validity (peformance);
            ensure that objects are pushed/popped correctly.</remarks>
      <param name="obj">The item being processed (end).</param>
    </member>
    <member name="M:ProtoBuf.SerializationContext.DecodeUInt32Fixed(System.IO.Stream)">
      <summary>
            Slow (unbuffered) read from a stream; used to avoid issues
            with buffers when performing network IO.
            </summary>
    </member>
    <member name="M:ProtoBuf.SerializationContext.TryDecodeUInt32Fixed(System.IO.Stream,System.UInt32@)">
      <summary>
            Slow (unbuffered) read from a stream; used to avoid issues
            with buffers when performing network IO.
            </summary>
    </member>
    <member name="M:ProtoBuf.SerializationContext.DecodeUInt32(System.IO.Stream)">
      <summary>
            Slow (unbuffered) read from a stream; used to avoid issues
            with buffers when performing network IO.
            </summary>
    </member>
    <member name="M:ProtoBuf.SerializationContext.SkipStringData(System.IO.Stream)">
      <summary>
            Jump a block of data using a base-128 length prefix.
            </summary>
      <param name="source">The input stream.</param>
    </member>
    <member name="M:ProtoBuf.SerializationContext.TryDecodeUInt32(System.IO.Stream,System.UInt32@)">
      <summary>
            Slow (unbuffered) read from a stream; used to avoid issues
            with buffers when performing network IO.
            </summary>
      <returns>True if there is data in the stream and a value can be obtained;
            False if there is no data in the stream; note that an exception is still
            thrown if the data is invalid.</returns>
    </member>
    <member name="M:ProtoBuf.SerializationContext.Fill(System.Int32,System.Boolean)">
      <summary>
            Fills the IO buffer if there is not enough data buffered to complete the current operation.
            </summary>
      <param name="required">The maximum number of bytes required by the current operation.</param>
      <param name="demand">Should an exception be thrown if the data is not available?</param>
    </member>
    <member name="M:ProtoBuf.SerializationContext.Fill">
      <summary>
            Fills the IO buffer, moving any un-consumed data to the beginning of the cache.
            </summary>
    </member>
    <member name="M:ProtoBuf.SerializationContext.Flush(System.Int32)">
      <summary>
            Flushes the IO buffer if there is not enough space to complete the current operation.
            </summary>
      <param name="spaceRequired">The maximum number of bytes required by the current operation.</param>
    </member>
    <member name="M:ProtoBuf.SerializationContext.Flush">
      <summary>
            Flushes the IO buffer, writing any cached data to the underlying stream and resetting the cache.
            </summary>
    </member>
    <member name="T:ProtoBuf.ServiceModel.ProtoBehaviorAttribute">
      <summary>
            Uses protocol buffer serialization on the specified operation; note that this
            must be enabled on both the client and server.
            </summary>
    </member>
    <member name="F:ProtoBuf.WireType.Variant">
      <summary>
            Base-128 variant-length encoding
            </summary>
    </member>
    <member name="F:ProtoBuf.WireType.Fixed64">
      <summary>
            Fixed-length 8-byte encoding
            </summary>
    </member>
    <member name="F:ProtoBuf.WireType.String">
      <summary>
            Length-variant-prefixed encoding
            </summary>
    </member>
    <member name="F:ProtoBuf.WireType.StartGroup">
      <summary>
            Indicates the start of a group
            </summary>
    </member>
    <member name="F:ProtoBuf.WireType.EndGroup">
      <summary>
            Indicates the end of a group
            </summary>
    </member>
    <member name="F:ProtoBuf.WireType.Fixed32">
      <summary>
            Fixed-length 4-byte encoding
            </summary>
    </member>
    <member name="T:ProtoBuf.DataFormat">
      <summary>
            Sub-format to use when serializing/deserializing data
            </summary>
    </member>
    <member name="F:ProtoBuf.DataFormat.Default">
      <summary>
            Uses the default encoding for the data-type.
            </summary>
    </member>
    <member name="F:ProtoBuf.DataFormat.ZigZag">
      <summary>
            When applied to signed integer-based data (including Decimal), this
            indicates that zigzag variant encoding will be used. This means that values
            with small magnitude (regardless of sign) take a small amount
            of space to encode.
            </summary>
    </member>
    <member name="F:ProtoBuf.DataFormat.TwosComplement">
      <summary>
            When applied to signed integer-based data (including Decimal), this
            indicates that two's-complement variant encoding will be used.
            This means that any -ve number will take 10 bytes (even for 32-bit),
            so should only be used for compatibility.
            </summary>
    </member>
    <member name="F:ProtoBuf.DataFormat.FixedSize">
      <summary>
            When applied to signed integer-based data (including Decimal), this
            indicates that a fixed amount of space will be used.
            </summary>
    </member>
    <member name="F:ProtoBuf.DataFormat.Group">
      <summary>
            When applied to a sub-message, indicates that the value should be treated
            as group-delimited.
            </summary>
    </member>
    <member name="T:ProtoBuf.ProtoIncludeAttribute">
      <summary>
            Indicates the known-types to support for an individual
            message. This serializes each level in the hierarchy as
            a nested message to retain wire-compatibility with
            other protocol-buffer implementations.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoIncludeAttribute.#ctor(System.Int32,System.Type)">
      <summary>
            Creates a new instance of the ProtoIncludeAttribute.
            </summary>
      <param name="tag">The unique index (within the type) that will identify this data.</param>
      <param name="knownType">The additional type to serialize/deserialize.</param>
    </member>
    <member name="M:ProtoBuf.ProtoIncludeAttribute.#ctor(System.Int32,System.String)">
      <summary>
            Creates a new instance of the ProtoIncludeAttribute.
            </summary>
      <param name="tag">The unique index (within the type) that will identify this data.</param>
      <param name="knownTypeName">The additional type to serialize/deserialize.</param>
    </member>
    <member name="P:ProtoBuf.ProtoIncludeAttribute.Tag">
      <summary>
            Gets the unique index (within the type) that will identify this data.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoIncludeAttribute.KnownTypeName">
      <summary>
            Gets the additional type to serialize/deserialize.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoIncludeAttribute.KnownType">
      <summary>
            Gets the additional type to serialize/deserialize.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoIncludeAttribute.DataFormat">
      <summary>
            Specifies whether the inherited sype's sub-message should be
            written with a length-prefix (default), or with group markers.
            </summary>
    </member>
    <member name="T:ProtoBuf.ProtoContractAttribute">
      <summary>
            Indicates that a type is defined for protocol-buffer serialization.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoContractAttribute.Name">
      <summary>
            Gets or sets the defined name of the type.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoContractAttribute.ImplicitFirstTag">
      <summary>
            Gets or sets the fist offset to use with implicit field tags;
            only uesd if ImplicitFields is set.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoContractAttribute.ImplicitFields">
      <summary>
            Gets or sets the mechanism used to automatically infer field tags
            for members. This option should be used in advanced scenarios only.
            Please review the important notes against the ImplicitFields enumeration.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoContractAttribute.InferTagFromName">
      <summary>
            Enables/disables automatic tag generation based on the existing name / order
            of the defined members. This option is not used for members marked
            with ProtoMemberAttribute, as intended to provide compatibility with
            WCF serialization. WARNING: when adding new fields you must take
            care to increase the Order for new elements, otherwise data corruption
            may occur.
            </summary>
      <remarks>If not specified, the default is assumed from <see cref="P:ProtoBuf.Serializer.GlobalOptions.InferTagFromName" />.</remarks>
    </member>
    <member name="P:ProtoBuf.ProtoContractAttribute.DataMemberOffset">
      <summary>
            Specifies an offset to apply to [DataMember(Order=...)] markers;
            this is useful when working with mex-generated classes that have
            a different origin (usually 1 vs 0) than the original data-contract.
            
            This value is added to the Order of each member.
            </summary>
    </member>
    <member name="T:ProtoBuf.ProtoEnumAttribute">
      <summary>
            Used to define protocol-buffer specific behavior for
            enumerated values.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoEnumAttribute.HasValue">
      <summary>
            Indicates whether this instance has a customised value mapping
            </summary>
      <returns>true if a specific value is set</returns>
    </member>
    <member name="P:ProtoBuf.ProtoEnumAttribute.Value">
      <summary>
            Gets or sets the specific value to use for this enum during serialization.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoEnumAttribute.Name">
      <summary>
            Gets or sets the defined name of the enum, as used in .proto
            (this name is not used during serialization).
            </summary>
    </member>
    <member name="T:ProtoBuf.ProtoMemberAttribute">
      <summary>
            Declares a member to be used in protocol-buffer serialization, using
            the given Tag. A DataFormat may be used to optimise the serialization
            format (for instance, using zigzag encoding for negative numbers, or 
            fixed-length encoding for large values.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoMemberAttribute.#ctor(System.Int32)">
      <summary>
            Creates a new ProtoMemberAttribute instance.
            </summary>
      <param name="tag">Specifies the unique tag used to identify this member within the type.</param>
    </member>
    <member name="P:ProtoBuf.ProtoMemberAttribute.Name">
      <summary>
            Gets or sets the original name defined in the .proto; not used
            during serialization.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoMemberAttribute.DataFormat">
      <summary>
            Gets or sets the data-format to be used when encoding this value.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoMemberAttribute.Tag">
      <summary>
            Gets the unique tag used to identify this member within the type.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoMemberAttribute.IsRequired">
      <summary>
            Gets or sets a value indicating whether this member is mandatory.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoMemberAttribute.Options">
      <summary>
            Gets or sets a value indicating whether this member is packed (lists/arrays).
            </summary>
    </member>
    <member name="T:ProtoBuf.MemberSerializationOptions">
      <summary>
            Additional (optional) settings that control serialization of members
            </summary>
    </member>
    <member name="F:ProtoBuf.MemberSerializationOptions.None">
      <summary>
            Default; no additional options
            </summary>
    </member>
    <member name="F:ProtoBuf.MemberSerializationOptions.Packed">
      <summary>
            Indicates that repeated elements should use packed (length-prefixed) encoding
            </summary>
    </member>
    <member name="F:ProtoBuf.MemberSerializationOptions.Required">
      <summary>
            Indicates that the given item is required
            </summary>
    </member>
    <member name="T:ProtoBuf.ProtoPartialMemberAttribute">
      <summary>
            Declares a member to be used in protocol-buffer serialization, using
            the given Tag and MemberName. This allows ProtoMemberAttribute usage
            even for partial classes where the individual members are not
            under direct control.
            A DataFormat may be used to optimise the serialization
            format (for instance, using zigzag encoding for negative numbers, or 
            fixed-length encoding for large values.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoPartialMemberAttribute.#ctor(System.Int32,System.String)">
      <summary>
            Creates a new ProtoMemberAttribute instance.
            </summary>
      <param name="tag">Specifies the unique tag used to identify this member within the type.</param>
      <param name="memberName">Specifies the member to be serialized.</param>
    </member>
    <member name="P:ProtoBuf.ProtoPartialMemberAttribute.MemberName">
      <summary>
            The name of the member to be serialized.
            </summary>
    </member>
    <member name="T:ProtoBuf.SubStream">
      <summary>
            Describes a Stream that wraps an underlying stream but
            which limits the length. This is used for processing
            length-prefied messages (string wire-type) so that no
            complex code is required to manage the end of each
            object.
            </summary>
    </member>
    <member name="T:ProtoBuf.ExtensibleUtil">
      <summary>
            This class acts as an internal wrapper allowing us to do a dynamic
            methodinfo invoke; an't put into Serializer as don't want on public
            API; can't put into Serializer&lt;T&gt; since we need to invoke
            accross classes, which isn't allowed in Silverlight)
            </summary>
    </member>
    <member name="M:ProtoBuf.ExtensibleUtil.GetExtendedValues``1(ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat,System.Boolean,System.Boolean)">
      <summary>
            All this does is call GetExtendedValuesTyped with the correct type for "instance";
            this ensures that we don't get issues with subclasses declaring conflicting types -
            the caller must respect the fields defined for the type they pass in.
            </summary>
    </member>
    <member name="M:ProtoBuf.ExtensibleUtil.GetExtendedValuesTyped``2(``0,System.Int32,ProtoBuf.DataFormat,System.Boolean,System.Boolean)">
      <summary>
            Reads the given value(s) from the instance's stream; the serializer
            is inferred from TValue and format. For singletons, each occurrence
            is merged [only applies for sub-objects], and the composed
            value if yielded once; otherwise ("repeated") each occurrence
            is yielded separately.
            </summary>
      <remarks>Needs to be public to be callable thru reflection in Silverlight</remarks>
    </member>
    <member name="M:ProtoBuf.ExtensibleUtil.AppendExtendValue``1(ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat,System.Object)">
      <summary>
            All this does is call AppendExtendValueTyped with the correct type for "instance";
            this ensures that we don't get issues with subclasses declaring conflicting types -
            the caller must respect the fields defined for the type they pass in.
            </summary>
    </member>
    <member name="M:ProtoBuf.ExtensibleUtil.AppendExtendValueTyped``2(``0,System.Int32,ProtoBuf.DataFormat,``1)">
      <summary>
            Stores the given value into the instance's stream; the serializer
            is inferred from TValue and format.
            </summary>
      <remarks>Needs to be public to be callable thru reflection in Silverlight</remarks>
    </member>
    <member name="T:ProtoBuf.ProtoException">
      <summary>
            Indicates an error during serialization/deserialization of a proto stream.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoException.#ctor">
      <summary>Creates a new ProtoException instance.</summary>
    </member>
    <member name="M:ProtoBuf.ProtoException.#ctor(System.String)">
      <summary>Creates a new ProtoException instance.</summary>
    </member>
    <member name="M:ProtoBuf.ProtoException.#ctor(System.String,System.Exception)">
      <summary>Creates a new ProtoException instance.</summary>
    </member>
    <member name="M:ProtoBuf.ProtoException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Creates a new ProtoException instance.</summary>
    </member>
    <member name="T:ProtoBuf.UnknownType">
      <summary>
            The (non-extensible) UnknownType is used when deserializing
            unexpected groups.
            </summary>
    </member>
    <member name="M:ProtoBuf.AsyncUtility.RunAsync``1(ProtoBuf.AsyncBegin{``0},ProtoBuf.AsyncEnd{``0},System.Action{``0},System.Action{System.Exception})">
      <summary>Simplified calling convention for asynchronous Begin/End operations.</summary>
      <typeparam name="T">The type of data returned by the async operation.</typeparam>
      <param name="begin">The start (Begin*) of the async operation.</param>
      <param name="end">The end (End*) of the async operation.</param>
      <param name="callback">The operation to perform once the operation has completed and a value received.</param>
      <param name="exceptionHandler">Callback to invoke when an excetption is thrown during the async operation.</param>
    </member>
    <member name="T:ProtoBuf.AsyncBegin`1">
      <summary>Defines the start of a Begin/End async operation pair.</summary>
      <typeparam name="T">The type of value returned by the async operation.</typeparam>
      <param name="operation">The operation to be performed.</param>
      <param name="state">User-state to be passed to the operation.</param>
      <returns>A token to the async operation.</returns>
    </member>
    <member name="T:ProtoBuf.AsyncEnd`1">
      <summary>Defines the completion callback of a Begin/End async operation pair.</summary>
      <typeparam name="T">The type of value returned by the async operation.</typeparam>
      <param name="operation">The async operation token.</param>
      <returns>The final value of the async operation.</returns>
    </member>
    <member name="T:ProtoBuf.IExtension">
      <summary>
            Provides addition capability for supporting unexpected fields during
            protocol-buffer serialization/deserialization. This allows for loss-less
            round-trip/merge, even when the data is not fully understood.
            </summary>
    </member>
    <member name="M:ProtoBuf.IExtension.BeginAppend">
      <summary>
            Requests a stream into which any unexpected fields can be persisted.
            </summary>
      <returns>A new stream suitable for storing data.</returns>
    </member>
    <member name="M:ProtoBuf.IExtension.EndAppend(System.IO.Stream,System.Boolean)">
      <summary>
            Indicates that all unexpected fields have now been stored. The
            implementing class is responsible for closing the stream. If
            "commit" is not true the data may be discarded.
            </summary>
      <param name="stream">The stream originally obtained by BeginAppend.</param>
      <param name="commit">True if the append operation completed successfully.</param>
    </member>
    <member name="M:ProtoBuf.IExtension.BeginQuery">
      <summary>
            Requests a stream of the unexpected fields previously stored.
            </summary>
      <returns>A prepared stream of the unexpected fields.</returns>
    </member>
    <member name="M:ProtoBuf.IExtension.EndQuery(System.IO.Stream)">
      <summary>
            Indicates that all unexpected fields have now been read. The
            implementing class is responsible for closing the stream.
            </summary>
      <param name="stream">The stream originally obtained by BeginQuery.</param>
    </member>
    <member name="M:ProtoBuf.IExtension.GetLength">
      <summary>
            Requests the length of the raw binary stream; this is used
            when serializing sub-entities to indicate the expected size.
            </summary>
      <returns>The length of the binary stream representing unexpected data.</returns>
    </member>
    <member name="T:ProtoBuf.BufferExtension">
      <summary>
            Provides a simple buffer-based implementation of an <see cref="T:ProtoBuf.IExtension">extension</see> object.
            </summary>
    </member>
    <member name="T:ProtoBuf.ProtoBeforeSerializationAttribute">
      <summary>Specifies a method on the root-contract in an hierarchy to be invoked before serialization.</summary>
    </member>
    <member name="T:ProtoBuf.ProtoAfterSerializationAttribute">
      <summary>Specifies a method on the root-contract in an hierarchy to be invoked after serialization.</summary>
    </member>
    <member name="T:ProtoBuf.ProtoBeforeDeserializationAttribute">
      <summary>Specifies a method on the root-contract in an hierarchy to be invoked before deserialization.</summary>
    </member>
    <member name="T:ProtoBuf.ProtoAfterDeserializationAttribute">
      <summary>Specifies a method on the root-contract in an hierarchy to be invoked after deserialization.</summary>
    </member>
    <member name="T:ProtoBuf.AsyncResult">
      <summary>
            Represents the function to obtain the return value from an asynchronouse operation;
            comparable to Func&lt;object&gt;.
            </summary>
    </member>
    <member name="T:ProtoBuf.Getter`2">
      <summary>
            Returns the required value from an instance; comparable to Func&lt;TEntity,TValue&gt;
            </summary>
    </member>
    <member name="T:ProtoBuf.Setter`2">
      <summary>
            Assigns the required value to an instance; comparable to Action&lt;TEntity,TValue&gt;.
            </summary>
    </member>
    <member name="T:ProtoBuf.ImplicitFields">
      <summary>
            Specifies the method used to infer field tags for members of the type
            under consideration. Tags are deduced using the invariant alphabetic
            sequence of the members' names; this makes implicit field tags very brittle,
            and susceptible to changes such as field names (normally an isolated
            change).
            </summary>
    </member>
    <member name="F:ProtoBuf.ImplicitFields.None">
      <summary>
            No members are serialized implicitly; all members require a suitable
            attribute such as [ProtoMember]. This is the recmomended mode for
            most scenarios.
            </summary>
    </member>
    <member name="F:ProtoBuf.ImplicitFields.AllPublic">
      <summary>
            Public properties and fields are eligible for implicit serialization;
            this treats the public API as a contract.
            </summary>
    </member>
    <member name="F:ProtoBuf.ImplicitFields.AllFields">
      <summary>
            Public and non-public fields are eligible for implicit serialization;
            this acts as a state/implementation serializer.
            </summary>
    </member>
    <member name="T:ProtoBuf.ObjectFactory`1">
      <summary>
            Abstract object factory, used to negate the need for a ": new()" generic constraint
            on Serializer-of-T.
            </summary>
      <typeparam name="T">The type of object to be created.</typeparam>
    </member>
    <member name="T:ProtoBuf.PrefixStyle">
      <summary>
            Specifies the type of prefix that should be applied to messages.
            </summary>
    </member>
    <member name="F:ProtoBuf.PrefixStyle.None">
      <summary>
            No length prefix is applied to the data; the data is terminated only be the end of the stream.
            </summary>
    </member>
    <member name="F:ProtoBuf.PrefixStyle.Base128">
      <summary>
            A base-128 length prefix is applied to the data (efficient for short messages).
            </summary>
    </member>
    <member name="F:ProtoBuf.PrefixStyle.Fixed32">
      <summary>
            A fixed-length (little-endian) length prefix is applied to the data (useful for compatibility).
            </summary>
    </member>
    <member name="T:ProtoBuf.Property.PropertyEnum`2">
      <summary>
            Property implemenation that handles enum values.
            </summary>
      <remarks>All enum wire-values must be in the Int32 range.</remarks>
    </member>
    <member name="T:ProtoBuf.Property.PropertyFactory">
      <summary>
            Utility class for creating/initializing protobuf-net property
            wrappers.
            </summary>
    </member>
    <member name="T:ProtoBuf.Property.PropertyFactory.PassThruCache`1">
      <summary>
            Stores, per T, a pass-thru Getter&lt;T,T&gt; delegate.
            </summary>
    </member>
    <member name="M:ProtoBuf.Property.PropertyFactory.GetPassThru``1">
      <summary>
            Returns a Getter&lt;T,T&gt; delegate that simply returns
            the original value. This allows code re-use between
            different implementations.
            </summary>
      <remarks>Originally an anonymous method was used, but
            this proved problematic with the Mono 2.0 compiler.</remarks>
    </member>
    <member name="M:ProtoBuf.Property.PropertyFactory.CreatePassThru``1(System.Int32,ProtoBuf.DataFormat@)">
      <summary>
            Create a simple Property that can be used standalone
            to encode/decode values for the given type.
            </summary>
    </member>
    <member name="M:ProtoBuf.Property.PropertyFactory.Create``1(System.Reflection.MemberInfo)">
      <summary>
            Create a Property based around a class
            member (PropertyInfo/FieldInfo).
            </summary>
    </member>
    <member name="M:ProtoBuf.Property.PropertyFactory.CreateProperty``1(System.Type,ProtoBuf.DataFormat@,ProtoBuf.MemberSerializationOptions)">
      <summary>
            Responsible for deciding how to encode/decode a given data-type; maybe
            not the most elegant solution, but it is simple and quick.
            </summary>
    </member>
    <member name="T:ProtoBuf.Property.PropertyMessageString`4">
      <summary>
            Serializes an entity using string (length-prefixed) syntax.
            The high number of type arguments is requird to support ancestral serialization;
            there are 2 use-cases:
              direct: for example, a property (base is the highest contract ancestor; prop = actual = the property-type)
              descendent: used internally to cascade inheritance; prop = base = the parent type, actual = the child type
            </summary>
      <typeparam name="TSource">The type declaring the member</typeparam>
      <typeparam name="TProperty">The defined member-type for accessing data</typeparam>
      <typeparam name="TEntityBase">The base-type to use when verifying / instantiating sub-type instances</typeparam>
      <typeparam name="TEntityActual">The type to use for serialization purposes</typeparam>
    </member>
    <member name="T:ProtoBuf.Property.PropertyMessageGroup`4">
      <summary>
            Serializes an entity using group (delimited) syntax.
            The high number of type arguments is requird to support ancestral serialization;
            there are 2 use-cases:
              direct: for example, a property (base is the highest contract ancestor; prop = actual = the property-type)
              descendent: used internally to cascade inheritance; prop = base = the parent type, actual = the child type
            </summary>
      <typeparam name="TSource">The type declaring the member</typeparam>
      <typeparam name="TProperty">The defined member-type for accessing data</typeparam>
      <typeparam name="TEntityBase">The base-type to use when verifying / instantiating sub-type instances</typeparam>
      <typeparam name="TEntityActual">The type to use for serialization purposes</typeparam>
    </member>
    <member name="T:ProtoBuf.ProtoIgnoreAttribute">
      <summary>
            Indicates that a member should be excluded from serialization; this
            is only normally used when using implict fields.
            </summary>
    </member>
    <member name="T:ProtoBuf.ProtoPartialIgnoreAttribute">
      <summary>
            Indicates that a member should be excluded from serialization; this
            is only normally used when using implict fields. This allows
            ProtoIgnoreAttribute usage
            even for partial classes where the individual members are not
            under direct control.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoPartialIgnoreAttribute.#ctor(System.String)">
      <summary>
            Creates a new ProtoPartialIgnoreAttribute instance.
            </summary>
      <param name="memberName">Specifies the member to be ignored.</param>
    </member>
    <member name="P:ProtoBuf.ProtoPartialIgnoreAttribute.MemberName">
      <summary>
            The name of the member to be ignored.
            </summary>
    </member>
    <member name="T:ProtoBuf.ServiceModel.ExceptionEventArgs">
      <summary>
            Represents an exception raised through an event.
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.ExceptionEventArgs.#ctor(System.Exception)">
      <summary>
            Creates a new instance of ExceptionEventArgs for the gievn exception.
            </summary>
      <param name="exception">
      </param>
    </member>
    <member name="P:ProtoBuf.ServiceModel.ExceptionEventArgs.Exception">
      <summary>
            The exception represented by the event.
            </summary>
    </member>
    <member name="T:ProtoBuf.ServiceModel.Client.ITransport">
      <summary>
            Provides the underlying transport for a family of RPC operations.
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Client.ITransport.SendRequestAsync(ProtoBuf.ServiceModel.Client.ServiceRequest)">
      <summary>
            Begins an async operation over the transport.
            </summary>
      <param name="request">The operation to perform (includes the facility
            to provide a response for the operation).</param>
    </member>
    <member name="T:ProtoBuf.ServiceModel.Client.HttpBasicTransport">
      <summary>
            Performs RPC using basic http POSTs to a web-server.
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Client.HttpBasicTransport.#ctor(System.String)">
      <summary>Create a new HttpBasicTransport instance.</summary>
      <param name="uri">The endpoint for the service. By default, the servic
            is assumed to be RESTful, and the action is appended as a route; the
            route can be customized by including the "{action}" token in the uri.</param>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Client.HttpBasicTransport.Dispose">
      <summary>
            Releases any resources associated with the transport.
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Client.HttpBasicTransport.Dispose(System.Boolean)">
      <summary>
            Releases any resources associated with the transport.
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Client.HttpBasicTransport.CheckDisposed">
      <summary>
            Raises an exception if the instance has been disposed.
            </summary>
    </member>
    <member name="T:ProtoBuf.ServiceModel.ProtoBehaviorExtension">
      <summary>
            Configuration element to swap out DatatContractSerilaizer with the XmlProtoSerializer for a given endpoint.
            </summary>
      <seealso cref="T:ProtoBuf.ServiceModel.ProtoEndpointBehavior" />
    </member>
    <member name="M:ProtoBuf.ServiceModel.ProtoBehaviorExtension.#ctor">
      <summary>
            Creates a new ProtoBehaviorExtension instance.
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.ProtoBehaviorExtension.CreateBehavior">
      <summary>
            Creates a behavior extension based on the current configuration settings.
            </summary>
      <returns>The behavior extension.</returns>
    </member>
    <member name="P:ProtoBuf.ServiceModel.ProtoBehaviorExtension.BehaviorType">
      <summary>
            Gets the type of behavior.
            </summary>
    </member>
    <member name="T:ProtoBuf.ServiceModel.ProtoEndpointBehavior">
      <summary>
            Behavior to swap out DatatContractSerilaizer with the XmlProtoSerializer for a given endpoint.
             <example>
            Add the following to the server and client app.config in the system.serviceModel section:
             <behaviors><endpointBehaviors><behavior name="ProtoBufBehaviorConfig"><ProtoBufSerialization /></behavior></endpointBehaviors></behaviors><extensions><behaviorExtensions><add name="ProtoBufSerialization" type="ProtoBuf.ServiceModel.ProtoBehaviorExtension, protobuf-net, Version=1.0.0.255, Culture=neutral, PublicKeyToken=257b51d87d2e4d67" /></behaviorExtensions></extensions>
            
            Configure your endpoints to have a behaviorConfiguration as follows:
            
             <service name="TK.Framework.Samples.ServiceModel.Contract.SampleService"><endpoint address="http://myhost:9003/SampleService" binding="basicHttpBinding" behaviorConfiguration="ProtoBufBehaviorConfig" bindingConfiguration="basicHttpBindingConfig" name="basicHttpProtoBuf" contract="ISampleServiceContract" /></service><client><endpoint address="http://myhost:9003/SampleService" binding="basicHttpBinding" bindingConfiguration="basicHttpBindingConfig" contract="ISampleServiceContract" name="BasicHttpProtoBufEndpoint" behaviorConfiguration="ProtoBufBehaviorConfig" /></client></example></summary>
    </member>
    <member name="T:ProtoBuf.ServiceModel.RpcUtils">
      <summary>
            Utility operations common to RPC implementations.
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.RpcUtils.IsRequestArgument(System.Reflection.ParameterInfo)">
      <summary>
            Indicates whether the given parameter forms part of a request - i.e.
            is "in" or "ref".
            </summary>
      <param name="parameter">The parameter to test.</param>
      <returns>True if the given parameter is part of a request.</returns>
    </member>
    <member name="M:ProtoBuf.ServiceModel.RpcUtils.IsResponseArgument(System.Reflection.ParameterInfo)">
      <summary>
            Indicates whether the given parameter forms part of a response - i.e.
            is "out" or "ref".
            </summary>
      <param name="parameter">The parameter to test.</param>
      <returns>True if the given parameter is part of a response.</returns>
    </member>
    <member name="M:ProtoBuf.ServiceModel.RpcUtils.GetServiceName(System.Type)">
      <summary>
            Returns the name associated with a service contract.
            </summary>
      <param name="type">The service-contract type.</param>
      <returns>The name of the service.</returns>
    </member>
    <member name="T:ProtoBuf.ServiceModel.Server.ServerBase">
      <summary>
            Provides common functionality required by RPC servers.
            </summary>
    </member>
    <member name="T:ProtoBuf.ServiceModel.Server.ServerBase.ServiceBase">
      <summary>
            Represents a service endpoint provided by the server.
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Server.ServerBase.ServiceBase.GetInstance">
      <summary>
            Obtains the instance representing the service endpoint for a call.
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Server.ServerBase.ServiceBase.ReleaseInstance(System.Object)">
      <summary>
            Releases the instance representing the service endpoint for a call.
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Server.ServerBase.ServiceBase.Dispose">
      <summary>
            Releases any resources associated with the endpoint.
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Server.ServerBase.ServiceBase.#ctor(System.Type)">
      <summary>
            Initialises a new service endpoint for the given service type.
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Server.ServerBase.ServiceBase.GetAction(System.String)">
      <summary>
            Obtains the method that represents a given action.
            </summary>
      <param name="name">The name of the action.</param>
      <returns>The method that should be invoked.</returns>
    </member>
    <member name="P:ProtoBuf.ServiceModel.Server.ServerBase.ServiceBase.ServiceName">
      <summary>
            The name of the service endpoint.
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Server.ServerBase.Add``2">
      <summary>
            Adds a per-call service to the server. An instance of the type will
            be created (and disposed if appropriate) per request. 
            </summary>
      <typeparam name="TContract">The type of service-contract to provide.</typeparam>
      <typeparam name="TService">The concrete type that will implement the service.</typeparam>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Server.ServerBase.Add``1(``0)">
      <summary>
            Adds a singleton service to the server. All requests will be
            serviced by the supplied instance. This instance will be
            disposed (if appropriate) with the server.
            </summary>
      <typeparam name="T">The type of service to provide.</typeparam>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Server.ServerBase.Dispose``1(``0@)">
      <summary>
            Releases and nulls a given field/variable.
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Server.ServerBase.OnBeforeWriteResponse(System.Object)">
      <summary>
            Performs any pre-response operations required.
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Server.ServerBase.Execute(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.IO.Stream,System.IO.Stream,System.Object)">
      <summary>
            Performs server-side processing of an action, including deserialization
            of arguments, method-invokation, and serialization of the return value and
            any `out`/`ref` arguments.
            </summary>
    </member>
    <member name="T:ProtoBuf.ServiceModel.Server.HttpServer">
      <summary>
            Standalone http server compatible with <seealso cref="T:ProtoBuf.ServiceModel.Client.HttpBasicTransport" />.
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Server.HttpServer.#ctor(System.String,System.Type,System.Type)">
      <summary>
            Create a new HttpServer instance for the given service-type.
            </summary>
      <param name="uriPrefix">The base uri on which to listen for messages.</param>
      <param name="serviceContractType">The interface that represents the service contract.</param>
      <param name="serviceImplementationType">The concrete type that implements the service contract.</param>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Server.HttpServer.#ctor(System.String)">
      <summary>
            Create a new HttpServer instance for the given service-type.
            </summary>
      <param name="uriPrefix">The base uri on which to listen for messages.</param>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Server.HttpServer.Start">
      <summary>
            Begin listening for messages on the server.
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Server.HttpServer.OnBeforeWriteResponse(System.Object)">
      <summary>
            Performs any pre-response operations required.
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Server.HttpServer.Close">
      <summary>
            Stop listening for messages on the server, and release
            any associated resources.
            </summary>
    </member>
    <member name="T:ProtoBuf.ServiceModel.Client.ProtoClient`1">
      <summary>
            Provides transport-independent wrapper logic for
            managing RPC calls to the server.
            </summary>
      <typeparam name="TService">The service contract that the client represents.</typeparam>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Client.ProtoClient`1.Dispose">
      <summary>
            Releases any resources associated with the client.
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Client.ProtoClient`1.#ctor(ProtoBuf.ServiceModel.Client.ITransport)">
      <summary>
            Create a new client object.
            </summary>
      <param name="transport">The transport implementation to use.</param>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Client.ProtoClient`1.InvokeAsync(System.String,System.Action{ProtoBuf.AsyncResult},System.Object[])">
      <summary>
            Begins an RPC invokation asynchrononously.
            </summary>
      <param name="methodName">The name of the method (on the service interface) to invoke.</param>
      <param name="args">The request payload.</param>
      <param name="callback">The operation to perform when a response is received.</param>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Client.ProtoClient`1.Invoke(System.String,System.Object[])">
      <summary>
            Performs an RPC invokation synchrononously.
            </summary>
      <param name="methodName">The name of the method (on the service interface) to invoke.</param>
      <param name="args">The request payload.</param>
      <returns>The response payload.</returns>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Client.ProtoClient`1.Invoke(System.Reflection.MethodInfo,System.Object[])">
      <summary>
            Performs an RPC invokation synchrononously.
            </summary>
      <param name="method">The method (on the service interface) to invoke.</param>
      <param name="args">The request payload.</param>
      <returns>The response payload.</returns>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Client.ProtoClient`1.InvokeAsync(System.Reflection.MethodInfo,System.Action{ProtoBuf.AsyncResult},System.Object[])">
      <summary>
            Begins an RPC invokation asynchrononously.
            </summary>
      <param name="method">The method (on the service interface) to invoke.</param>
      <param name="args">The request payload.</param>
      <param name="callback">The operation to perform when a response is received.</param>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Client.ProtoClient`1.ResolveAction(System.Reflection.MethodInfo)">
      <summary>
            Identify the action to use for a given method.
            </summary>
      <param name="method">The method requested.</param>
      <returns>The action to use.</returns>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Client.ProtoClient`1.ResolveService(System.Type)">
      <summary>
            Identify the service to use for a given method.
            </summary>
      <param name="serviceType">The service requested.</param>
      <returns>The service to use.</returns>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Client.ProtoClient`1.OnException(System.Exception)">
      <summary>
            Signals that an error occured processing RPC calls.
            </summary>
      <param name="exception">The error details.</param>
    </member>
    <member name="P:ProtoBuf.ServiceModel.Client.ProtoClient`1.Timeout">
      <summary>
            Gets or sets the timeout (in milliseconds) for synchronous RPC operations.
            </summary>
    </member>
    <member name="P:ProtoBuf.ServiceModel.Client.ProtoClient`1.Transport">
      <summary>
            Gets the transport mechanism associated with the client.
            </summary>
    </member>
    <member name="T:ProtoBuf.ServiceModel.Client.ServiceRequest">
      <summary>
            Represents an in-progress request (and response mechanism)
            for a basic RPC stack.
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Client.ServiceRequest.OnException(System.Exception)">
      <summary>Called by transports; signals that the operation failed.</summary>
      <param name="exception">The details of the failure.</param>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Client.ServiceRequest.OnResponse(System.Object)">
      <summary>Called by transports; signals that the operation succeeded.</summary>
      <param name="responseObject">The server's response the the request.</param>
    </member>
    <member name="M:ProtoBuf.ServiceModel.Client.ServiceRequest.#ctor(System.String,System.String,System.Reflection.MethodInfo,System.Object[],System.Object,System.Action{ProtoBuf.AsyncResult})">
      <summary>Create a new service request.</summary>
      <param name="action">The contract-based name of the operation to perform.</param>
      <param name="service">The contract-based name of the service to use.</param>
      <param name="method">Provides reflection access to the contract member representing the operation.</param>
      <param name="args">The argument values for the method.</param>
      <param name="userState">Caller-defined state for this operation.</param>
      <param name="callback">The operation to perform when this request has completed.</param>
    </member>
    <member name="P:ProtoBuf.ServiceModel.Client.ServiceRequest.UserState">
      <summary>Caller-defined state for this operation.</summary>
    </member>
    <member name="P:ProtoBuf.ServiceModel.Client.ServiceRequest.Args">
      <summary>The object graph representing the query request object.</summary>
    </member>
    <member name="P:ProtoBuf.ServiceModel.Client.ServiceRequest.ResponseObject">
      <summary>The object graph representing the server's response.</summary>
    </member>
    <member name="P:ProtoBuf.ServiceModel.Client.ServiceRequest.Exception">
      <summary> Descripbes any exception raised by the transport.</summary>
    </member>
    <member name="P:ProtoBuf.ServiceModel.Client.ServiceRequest.Action">
      <summary>The contract-based name of the operation to perform.</summary>
    </member>
    <member name="P:ProtoBuf.ServiceModel.Client.ServiceRequest.Service">
      <summary>The contract-based name of the service to ues.</summary>
    </member>
    <member name="P:ProtoBuf.ServiceModel.Client.ServiceRequest.Method">
      <summary>Provides reflection access to the contract member representing the operation.</summary>
    </member>
    <member name="T:System.Collections.Generic.AnonymousComparer`1">
      <summary>
            Provides an implementation of IComparer by providing a method that compares two objects.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.AnonymousComparer`1.#ctor(System.Func{`0,`0,System.Int32})">
      <summary>
            Creates an instance of IComparer by providing a method that compares two objects.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.AnonymousComparer`1.Compare(`0,`0)">
      <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
    </member>
    <member name="T:System.Concurrency.IScheduler">
      <summary>
            Represents an object that schedules units of work.
            </summary>
    </member>
    <member name="M:System.Concurrency.IScheduler.Schedule(System.Action)">
      <summary>
            Schedules action to be executed.
            </summary>
    </member>
    <member name="M:System.Concurrency.IScheduler.Schedule(System.Action,System.TimeSpan)">
      <summary>
            Schedules action to be executed after dueTime.
            </summary>
    </member>
    <member name="P:System.Concurrency.IScheduler.Now">
      <summary>
            Gets the scheduler's notion of current time.
            </summary>
    </member>
    <member name="T:System.Concurrency.EventLoopScheduler">
      <summary>
            Represents an object that schedules units of work on a designated thread.
            </summary>
    </member>
    <member name="M:System.Concurrency.EventLoopScheduler.#ctor">
      <summary>
            Creates an object that schedules units of work on a designated thread.
            </summary>
    </member>
    <member name="M:System.Concurrency.EventLoopScheduler.#ctor(System.String)">
      <summary>
            Creates an object that schedules units of work on a designated thread.
            </summary>
    </member>
    <member name="M:System.Concurrency.EventLoopScheduler.Schedule(System.Action)">
      <summary>
            Schedules action to be executed.
            </summary>
    </member>
    <member name="M:System.Concurrency.EventLoopScheduler.Schedule(System.Action,System.TimeSpan)">
      <summary>
            Schedules action to be executed after dueTime.
            </summary>
    </member>
    <member name="M:System.Concurrency.EventLoopScheduler.Dispose">
      <summary>
            Ends the thread associated with this scheduler.
            </summary>
    </member>
    <member name="P:System.Concurrency.EventLoopScheduler.Now">
      <summary>
            Gets the scheduler's notion of current time.
            </summary>
    </member>
    <member name="T:System.Concurrency.NewThreadScheduler">
      <summary>
            Represents an object that schedules units of work on the current thread.
            </summary>
    </member>
    <member name="M:System.Concurrency.NewThreadScheduler.Schedule(System.Action)">
      <summary>
            Schedules action to be executed.
            </summary>
    </member>
    <member name="M:System.Concurrency.NewThreadScheduler.Schedule(System.Action,System.TimeSpan)">
      <summary>
            Schedules action to be executed after dueTime.
            </summary>
    </member>
    <member name="P:System.Concurrency.NewThreadScheduler.Now">
      <summary>
            Gets the scheduler's notion of current time.
            </summary>
    </member>
    <member name="T:System.Concurrency.SynchronizationContextScheduler">
      <summary>
            Represents an object that schedules units of work on a provided SynchronizationContext.
            </summary>
    </member>
    <member name="M:System.Concurrency.SynchronizationContextScheduler.#ctor(System.Threading.SynchronizationContext)">
      <summary>
            Creates an object that schedules units of work on the provided SynchronizationContext.
            </summary>
    </member>
    <member name="M:System.Concurrency.SynchronizationContextScheduler.Schedule(System.Action)">
      <summary>
            Schedules action to be executed.
            </summary>
    </member>
    <member name="M:System.Concurrency.SynchronizationContextScheduler.Schedule(System.Action,System.TimeSpan)">
      <summary>
            Schedules action to be executed after dueTime.
            </summary>
    </member>
    <member name="P:System.Concurrency.SynchronizationContextScheduler.Now">
      <summary>
            Gets the scheduler's notion of current time.
            </summary>
    </member>
    <member name="T:System.Concurrency.TaskPoolScheduler">
      <summary>
            Represents an object that schedules units of work using a provided TaskFactory.
            </summary>
    </member>
    <member name="M:System.Concurrency.TaskPoolScheduler.#ctor(System.Threading.Tasks.TaskFactory)">
      <summary>
            Creates an object that schedules units of work using the provided TaskFactory.
            </summary>
    </member>
    <member name="M:System.Concurrency.TaskPoolScheduler.Schedule(System.Action)">
      <summary>
            Schedules action to be executed.
            </summary>
    </member>
    <member name="M:System.Concurrency.TaskPoolScheduler.Schedule(System.Action,System.TimeSpan)">
      <summary>
            Schedules action to be executed after dueTime.
            </summary>
    </member>
    <member name="P:System.Concurrency.TaskPoolScheduler.Now">
      <summary>
            Gets the scheduler's notion of current time.
            </summary>
    </member>
    <member name="T:System.Disposables.AnonymousDisposable">
      <summary>
            Represents an Action-based disposable.
            </summary>
    </member>
    <member name="M:System.Disposables.AnonymousDisposable.#ctor(System.Action)">
      <summary>
            Constructs a new disposable with the given action used for disposal.
            </summary>
      <param name="dispose">Disposal action.</param>
    </member>
    <member name="M:System.Disposables.AnonymousDisposable.Dispose">
      <summary>
            Calls the disposal action.
            </summary>
    </member>
    <member name="T:System.Disposables.BooleanDisposable">
      <summary>
            Represents an IDisposable that can be checked for status.
            </summary>
    </member>
    <member name="M:System.Disposables.BooleanDisposable.#ctor">
      <summary>
            Constructs a new undisposed BooleanDisposable. 
            </summary>
    </member>
    <member name="M:System.Disposables.BooleanDisposable.Dispose">
      <summary>
            Sets the status to Disposed.
            </summary>
    </member>
    <member name="P:System.Disposables.BooleanDisposable.IsDisposed">
      <summary>
            Gets a value indicating whether the object is disposed.
            </summary>
    </member>
    <member name="T:System.Disposables.CancellationDisposable">
      <summary>
            Represents an IDisposable that can be checked for cancellation status.
            </summary>
    </member>
    <member name="M:System.Disposables.CancellationDisposable.#ctor(System.Threading.CancellationTokenSource)">
      <summary>
            Constructs a new CancellationDisposable that uses an existing CancellationTokenSource.
            </summary>
    </member>
    <member name="M:System.Disposables.CancellationDisposable.#ctor">
      <summary>
            Constructs a new CancellationDisposable that uses a new CancellationTokenSource.
            </summary>
    </member>
    <member name="M:System.Disposables.CancellationDisposable.Dispose">
      <summary>
            Cancels the CancellationTokenSource.
            </summary>
    </member>
    <member name="P:System.Disposables.CancellationDisposable.Token">
      <summary>
            Gets the CancellationToken used by this CancellationDisposable.
            </summary>
    </member>
    <member name="T:System.Disposables.ContextDisposable">
      <summary>
            Represents a thread-affine IDisposable.
            </summary>
    </member>
    <member name="M:System.Disposables.ContextDisposable.#ctor(System.Threading.SynchronizationContext,System.IDisposable)">
      <summary>
            Constructs a ContextDisposable that uses a SynchronziationContext on which to dipose the disposable.
            </summary>
    </member>
    <member name="M:System.Disposables.ContextDisposable.Dispose">
      <summary>
            Disposes the wrapped disposable on the provided SynchronizationContext.
            </summary>
    </member>
    <member name="P:System.Disposables.ContextDisposable.Context">
      <summary>
            Gets the provided SynchronizationContext.
            </summary>
    </member>
    <member name="T:System.Disposables.DefaultDisposable">
      <summary>
            Represents a disposable that does nothing on disposal.
            </summary>
    </member>
    <member name="F:System.Disposables.DefaultDisposable.Instance">
      <summary>
            Singleton default disposable.
            </summary>
    </member>
    <member name="M:System.Disposables.DefaultDisposable.Dispose">
      <summary>
            Does nothing.
            </summary>
    </member>
    <member name="T:System.Disposables.Disposable">
      <summary>
            Provides a set of static methods for creating Disposables.
            </summary>
    </member>
    <member name="M:System.Disposables.Disposable.Create(System.Action)">
      <summary>
            Creates the disposable that invokes dispose when disposed.
            </summary>
    </member>
    <member name="P:System.Disposables.Disposable.Empty">
      <summary>
            Represents the disposable that does nothing when disposed.
            </summary>
    </member>
    <member name="T:System.Disposables.CompositeDisposable">
      <summary>
            Represents a group of Disposables that are disposed together.
            </summary>
    </member>
    <member name="M:System.Disposables.CompositeDisposable.#ctor(System.IDisposable[])">
      <summary>
            Constructs a GroupDisposable from a group of disposables.
            </summary>
    </member>
    <member name="M:System.Disposables.CompositeDisposable.Add(System.IDisposable)">
      <summary>
            Adds a disposable to the GroupDisposable or disposes the disposable if the GroupDisposable is disposed.
            </summary>
    </member>
    <member name="M:System.Disposables.CompositeDisposable.Remove(System.IDisposable)">
      <summary>
            Removes and disposes the first occurrence of a disposable from the GroupDisposable.
            </summary>
    </member>
    <member name="M:System.Disposables.CompositeDisposable.Dispose">
      <summary>
            Disposes all disposables in the group and removes them from the group.
            </summary>
    </member>
    <member name="M:System.Disposables.CompositeDisposable.Clear">
      <summary>
            Removes and disposes all disposables from the GroupDisposable, but does not dispose the GroupDisposable.
            </summary>
    </member>
    <member name="M:System.Disposables.CompositeDisposable.Contains(System.IDisposable)">
      <summary>
            Determines whether the GroupDisposable contains a specific disposable.
            </summary>
    </member>
    <member name="M:System.Disposables.CompositeDisposable.CopyTo(System.IDisposable[],System.Int32)">
      <summary>
            Copies the disposables contained in the GroupDisposable to an Array, starting at a particular Array index.
            </summary>
    </member>
    <member name="M:System.Disposables.CompositeDisposable.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the GroupDisposable.
            </summary>
    </member>
    <member name="P:System.Disposables.CompositeDisposable.Count">
      <summary>
            Gets the number of disposables contained in the GroupDisposable.
            </summary>
    </member>
    <member name="P:System.Disposables.CompositeDisposable.IsReadOnly">
      <summary>
            Always returns false.
            </summary>
    </member>
    <member name="T:System.Disposables.RefCountDisposable">
      <summary>
            Represents a disposable that only disposes its underlying disposable when all dependent disposables have been disposed.
            </summary>
    </member>
    <member name="M:System.Disposables.RefCountDisposable.#ctor(System.IDisposable)">
      <summary>
            Creates a disposable that only disposes its underlying disposable when all dependent disposables have been disposed.
            </summary>
    </member>
    <member name="M:System.Disposables.RefCountDisposable.Dispose">
      <summary>
            Disposes the underlying disposable only when all dependent disposables have been disposed.
            </summary>
    </member>
    <member name="M:System.Disposables.RefCountDisposable.GetDisposable">
      <summary>
            Returns a disposable that when disposed decreases the refcount on the underlying disposable.
            </summary>
    </member>
    <member name="T:System.Disposables.MutableDisposable">
      <summary>
            Represents a disposable whose underlying disposable can be swapped for another disposable.
            </summary>
    </member>
    <member name="M:System.Disposables.MutableDisposable.#ctor">
      <summary>
            Constructs a new MutableDisposable with no current underlying disposable.
            </summary>
    </member>
    <member name="M:System.Disposables.MutableDisposable.Dispose">
      <summary>
            Disposes the underlying disposable as well as all future replacements.
            </summary>
    </member>
    <member name="P:System.Disposables.MutableDisposable.Disposable">
      <summary>
            Gets a value indicating whether the MutableDisposable has an underlying disposable.
            </summary>
    </member>
    <member name="T:System.Disposables.ScheduledDisposable">
      <summary>
            Represents an object that schedules units of work on a provided scheduler.
            </summary>
    </member>
    <member name="M:System.Disposables.ScheduledDisposable.#ctor(System.Concurrency.IScheduler,System.IDisposable)">
      <summary>
            Constructs a ScheduledDisposable that uses a scheduler on which to dipose the disposable.
            </summary>
    </member>
    <member name="M:System.Disposables.ScheduledDisposable.Dispose">
      <summary>
            Disposes the wrapped disposable on the provided scheduler.
            </summary>
    </member>
    <member name="P:System.Disposables.ScheduledDisposable.Disposable">
      <summary>
            Gets a value indicating the underlying disposable.
            </summary>
    </member>
    <member name="P:System.Disposables.ScheduledDisposable.Scheduler">
      <summary>
            Gets a value indicating the scheduler.
            </summary>
    </member>
    <member name="T:System.Diagnostics.ExceptionExtensions">
      <summary>
            Provides a set of static methods for exceptions.
            </summary>
    </member>
    <member name="M:System.Diagnostics.ExceptionExtensions.PrepareForRethrow(System.Exception)">
      <summary>
            Preserve callstack when rethrowing.
            </summary>
    </member>
    <member name="T:System.IObserver`2">
      <summary>
            Supports push-style iteration over an observable sequence.
            </summary>
    </member>
    <member name="M:System.IObserver`2.OnNext(`0)">
      <summary>
            Notifies the observer of a new value in the sequence.
            </summary>
    </member>
    <member name="M:System.IObserver`2.OnError(System.Exception)">
      <summary>
            Notifies the observer that an exception has occurred.
            </summary>
    </member>
    <member name="M:System.IObserver`2.OnCompleted">
      <summary>
            Notifies the observer of the end of the sequence.
            </summary>
    </member>
    <member name="T:System.Collections.Generic.NotificationKind">
      <summary>
            Indicates the type of a notification.
            </summary>
    </member>
    <member name="T:System.Collections.Generic.Notification`1">
      <summary>
            Represents a notification to an observer.
            </summary>
    </member>
    <member name="T:System.Collections.Generic.Notification`1.OnNext">
      <summary>
            Represents a OnNext notification to an observer.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.OnNext.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.OnNext.ToString">
      <summary>
            Returns a string representation of this instance.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.OnNext.Value">
      <summary>
            Returns the value of an OnNext notification.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.OnNext.Exception">
      <summary>
            Returns null.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.OnNext.HasValue">
      <summary>
            Returns true.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.OnNext.Kind">
      <summary>
            Returns NotificationKind.OnNext.
            </summary>
    </member>
    <member name="T:System.Collections.Generic.Notification`1.OnError">
      <summary>
            Represents a OnError notification to an observer.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.OnError.#ctor(System.Exception)">
      <summary>
            Constructs a notification of an exception.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.OnError.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.OnError.ToString">
      <summary>
            Returns a string representation of this instance.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.OnError.Value">
      <summary>
            Throws the exception.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.OnError.Exception">
      <summary>
            Returns the exception.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.OnError.HasValue">
      <summary>
            Returns false.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.OnError.Kind">
      <summary>
            Returns NotificationKind.OnError.
            </summary>
    </member>
    <member name="T:System.Collections.Generic.Notification`1.OnCompleted">
      <summary>
            Represents a OnCompleted notification to an observer.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.OnCompleted.#ctor">
      <summary>
            Constructs a notification of the end of a sequence.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.OnCompleted.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.OnCompleted.ToString">
      <summary>
            Returns a string representation of this instance.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.OnCompleted.Value">
      <summary>
            Throws an InvalidOperationException.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.OnCompleted.Exception">
      <summary>
            Returns null.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.OnCompleted.HasValue">
      <summary>
            Returns false.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.OnCompleted.Kind">
      <summary>
            Returns NotificationKind.OnCompleted.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.Equals(System.Collections.Generic.Notification{`0})">
      <summary>
            Indicates whether this instance and other are equal.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.op_Equality(System.Collections.Generic.Notification{`0},System.Collections.Generic.Notification{`0})">
      <summary>
            Indicates whether left and right are equal.       
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.op_Inequality(System.Collections.Generic.Notification{`0},System.Collections.Generic.Notification{`0})">
      <summary>
            Indicates whether left and right are not equal.       
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.Accept(System.IObserver{`0})">
      <summary>
            Invokes the observer's method corresponding to the notification.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.Accept``1(System.IObserver{`0,``0})">
      <summary>
            Invokes the observer's method corresponding to the notification and returns the produced result.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.Accept(System.Action{`0},System.Action{System.Exception},System.Action)">
      <summary>
            Invokes the delegate corresponding to the notification.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.Accept``1(System.Func{`0,``0},System.Func{System.Exception,``0},System.Func{``0})">
      <summary>
            Invokes the delegate corresponding to the notification and returns the produced result.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.Value">
      <summary>
            Returns the value of an OnNext notification or throws an exception.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.HasValue">
      <summary>
            Returns whether the notification has a value.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.Exception">
      <summary>
            Returns the exception of an OnError notification or returns null.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.Kind">
      <summary>
            Gets the kind of notification that is represented.
            </summary>
    </member>
    <member name="T:System.Concurrency.ControlScheduler">
      <summary>
            Represents an object that schedules units of work on the message loop associated with a control.
            </summary>
    </member>
    <member name="M:System.Concurrency.ControlScheduler.#ctor(System.Windows.Forms.Control)">
      <summary>
            Constructs a ControlScheduler that schedules units of work on the message loop associated with control.
            </summary>
    </member>
    <member name="M:System.Concurrency.ControlScheduler.Schedule(System.Action)">
      <summary>
            Schedules action to be executed on the message loop associated with the control.
            </summary>
    </member>
    <member name="M:System.Concurrency.ControlScheduler.Schedule(System.Action,System.TimeSpan)">
      <summary>
            Schedules action to be executed after dueTime on the message loop associated with the control.
            </summary>
    </member>
    <member name="P:System.Concurrency.ControlScheduler.Now">
      <summary>
            Gets the scheduler's notion of current time.
            </summary>
    </member>
    <member name="P:System.Concurrency.ControlScheduler.Control">
      <summary>
            Gets the control associated with the ControlScheduler.
            </summary>
    </member>
    <member name="T:System.Concurrency.DispatcherScheduler">
      <summary>
            Represents an object that schedules units of work on a Dispatcher.
            </summary>
    </member>
    <member name="M:System.Concurrency.DispatcherScheduler.#ctor(System.Windows.Threading.Dispatcher)">
      <summary>
            Constructs an DispatcherScheduler that schedules units of work on dispatcher.
            </summary>
    </member>
    <member name="M:System.Concurrency.DispatcherScheduler.Schedule(System.Action)">
      <summary>
            Schedules action to be executed on the dispatcher.
            </summary>
    </member>
    <member name="M:System.Concurrency.DispatcherScheduler.Schedule(System.Action,System.TimeSpan)">
      <summary>
            Schedules action to be executed after dueTime on the dispatcher.
            </summary>
    </member>
    <member name="P:System.Concurrency.DispatcherScheduler.Now">
      <summary>
            Gets the scheduler's notion of current time.
            </summary>
    </member>
    <member name="P:System.Concurrency.DispatcherScheduler.Dispatcher">
      <summary>
            Gets the dispatcher associated with the DispatcherScheduler.
            </summary>
    </member>
    <member name="T:System.Concurrency.ImmediateScheduler">
      <summary>
            Represents an object that schedules units of work to run immediately on the current thread.
            </summary>
    </member>
    <member name="M:System.Concurrency.ImmediateScheduler.Schedule(System.Action)">
      <summary>
            Schedules action to be executed.
            </summary>
    </member>
    <member name="M:System.Concurrency.ImmediateScheduler.Schedule(System.Action,System.TimeSpan)">
      <summary>
            Schedules action to be executed after dueTime.
            </summary>
    </member>
    <member name="P:System.Concurrency.ImmediateScheduler.Now">
      <summary>
            Gets the scheduler's notion of current time.
            </summary>
    </member>
    <member name="T:System.Concurrency.ThreadPoolScheduler">
      <summary>
            Represents an object that schedules units of work on the threadpool.
            </summary>
    </member>
    <member name="M:System.Concurrency.ThreadPoolScheduler.Schedule(System.Action)">
      <summary>
            Schedules action to be executed.
            </summary>
    </member>
    <member name="M:System.Concurrency.ThreadPoolScheduler.Schedule(System.Action,System.TimeSpan)">
      <summary>
            Schedules action to be executed after dueTime.
            </summary>
    </member>
    <member name="P:System.Concurrency.ThreadPoolScheduler.Now">
      <summary>
            Gets the scheduler's notion of current time.
            </summary>
    </member>
    <member name="T:System.Concurrency.CurrentThreadScheduler">
      <summary>
            Represents an object that schedules units of work on the current thread.
            </summary>
    </member>
    <member name="M:System.Concurrency.CurrentThreadScheduler.EnsureTrampoline(System.Action)">
      <summary>
            Ensures action is surrounded by a trampoline.
            </summary>
    </member>
    <member name="M:System.Concurrency.CurrentThreadScheduler.Schedule(System.Action)">
      <summary>
            Schedules action to be executed.
            </summary>
    </member>
    <member name="M:System.Concurrency.CurrentThreadScheduler.Schedule(System.Action,System.TimeSpan)">
      <summary>
            Schedules action to be executed after dueTime.
            </summary>
    </member>
    <member name="P:System.Concurrency.CurrentThreadScheduler.Now">
      <summary>
            Gets the scheduler's notion of current time.
            </summary>
    </member>
    <member name="T:System.Concurrency.Scheduler">
      <summary>
            Provides a set of static methods for creating Schedulers.
            </summary>
    </member>
    <member name="M:System.Concurrency.Scheduler.Schedule(System.Concurrency.IScheduler,System.Action,System.DateTimeOffset)">
      <summary>
            Schedules action to be executed at dueTime.
            </summary>
    </member>
    <member name="M:System.Concurrency.Scheduler.Schedule(System.Concurrency.IScheduler,System.Action{System.Action})">
      <summary>
            Schedules action to be executed recursively.
            </summary>
    </member>
    <member name="M:System.Concurrency.Scheduler.Schedule(System.Concurrency.IScheduler,System.Action{System.Action{System.TimeSpan}},System.TimeSpan)">
      <summary>
            Schedules action to be executed recursively after each dueTime.
            </summary>
    </member>
    <member name="M:System.Concurrency.Scheduler.Schedule(System.Concurrency.IScheduler,System.Action{System.Action{System.DateTimeOffset}},System.DateTimeOffset)">
      <summary>
            Schedules action to be executed recursively at each dueTime.
            </summary>
    </member>
    <member name="P:System.Concurrency.Scheduler.Immediate">
      <summary>
            Gets the scheduler that schedules work immediately on the current thread.
            </summary>
    </member>
    <member name="P:System.Concurrency.Scheduler.CurrentThread">
      <summary>
            Gets the scheduler that schedules work as soon as possible on the current thread.
            </summary>
    </member>
    <member name="P:System.Concurrency.Scheduler.ThreadPool">
      <summary>
            Gets the scheduler that schedules work on the ThreadPool.
            </summary>
    </member>
    <member name="P:System.Concurrency.Scheduler.NewThread">
      <summary>
            Gets the scheduler that schedules work on a new thread.
            </summary>
    </member>
    <member name="P:System.Concurrency.Scheduler.TaskPool">
      <summary>
            Gets the scheduler that schedules work on the default Task Factory.
            </summary>
    </member>
    <member name="P:System.Concurrency.Scheduler.Dispatcher">
      <summary>
            Gets the scheduler that schedules work on the current Dispatcher.
            </summary>
    </member>
    <member name="T:System.Linq.TimeInterval`1">
      <summary>
            Represents a time interval value.
            </summary>
    </member>
    <member name="M:System.Linq.TimeInterval`1.#ctor(`0,System.TimeSpan)">
      <summary>
            Constructs a timestamped value.
            </summary>
    </member>
    <member name="M:System.Linq.TimeInterval`1.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
    </member>
    <member name="M:System.Linq.TimeInterval`1.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
    </member>
    <member name="M:System.Linq.TimeInterval`1.ToString">
      <summary>
            Returns a string representation of this instance.
            </summary>
    </member>
    <member name="M:System.Linq.TimeInterval`1.op_Equality(System.Linq.TimeInterval{`0},System.Linq.TimeInterval{`0})">
      <summary>
            Indicates whether first and second are equal.       
            </summary>
    </member>
    <member name="M:System.Linq.TimeInterval`1.op_Inequality(System.Linq.TimeInterval{`0},System.Linq.TimeInterval{`0})">
      <summary>
            Indicates whether first and second are not equal.       
            </summary>
    </member>
    <member name="P:System.Linq.TimeInterval`1.Interval">
      <summary>
            Gets the interval.
            </summary>
    </member>
    <member name="P:System.Linq.TimeInterval`1.Value">
      <summary>
            Gets the value.
            </summary>
    </member>
    <member name="T:System.Linq.Timestamped`1">
      <summary>
            Represents a timestamped value.
            </summary>
    </member>
    <member name="M:System.Linq.Timestamped`1.#ctor(`0,System.DateTimeOffset)">
      <summary>
            Constructs a timestamped value.
            </summary>
    </member>
    <member name="M:System.Linq.Timestamped`1.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
    </member>
    <member name="M:System.Linq.Timestamped`1.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
    </member>
    <member name="M:System.Linq.Timestamped`1.ToString">
      <summary>
            Returns a string representation of this instance.
            </summary>
    </member>
    <member name="M:System.Linq.Timestamped`1.op_Equality(System.Linq.Timestamped{`0},System.Linq.Timestamped{`0})">
      <summary>
            Indicates whether first and second are equal.       
            </summary>
    </member>
    <member name="M:System.Linq.Timestamped`1.op_Inequality(System.Linq.Timestamped{`0},System.Linq.Timestamped{`0})">
      <summary>
            Indicates whether first and second are not equal.       
            </summary>
    </member>
    <member name="P:System.Linq.Timestamped`1.Timestamp">
      <summary>
            Gets the timestamp.
            </summary>
    </member>
    <member name="P:System.Linq.Timestamped`1.Value">
      <summary>
            Gets the value.
            </summary>
    </member>
    <member name="T:System.Unit">
      <summary>
            Represents void.
            </summary>
    </member>
    <member name="M:System.Unit.Equals(System.Unit)">
      <summary>
            Always returns true.
            </summary>
    </member>
    <member name="M:System.Unit.Equals(System.Object)">
      <summary>
            Check equality between a unit value and other objects.
            </summary>
    </member>
    <member name="M:System.Unit.GetHashCode">
      <summary>
            Gets the unit value's hash code.
            </summary>
    </member>
    <member name="M:System.Unit.op_Equality(System.Unit,System.Unit)">
      <summary>
            Always returns true.
            </summary>
    </member>
    <member name="M:System.Unit.op_Inequality(System.Unit,System.Unit)">
      <summary>
            Always returns false.
            </summary>
    </member>
    <member name="T:System.Collections.Generic.IEvent`1">
      <summary>
            Represents the Sender and EventArg values of a .NET event.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.IEvent`1.Sender">
      <summary>
            Gets the sender value of the event.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.IEvent`1.EventArgs">
      <summary>
            Gets the event arguments value of the event.
            </summary>
    </member>
    <member name="T:System.Collections.Generic.Event">
      <summary>
            Provides a set of static methods for creating events.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Event.Create``1(System.Object,``0)">
      <summary>
            Creates an instance of the IEvent interface.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Synchronize``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Synchronizes all access to source.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.ObserveOn``1(System.Collections.Generic.IEnumerable{``0},System.Concurrency.IScheduler)">
      <summary>
            Runs evaluation of sequence on specified scheduler.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.StartWith``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>
            Prepends a value to a sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.StartWith``1(System.Collections.Generic.IEnumerable{``0},``0[])">
      <summary>
            Prepends values to a sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
      <summary>
            Invokes the action for its side-effects on each value in the sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action)">
      <summary>
            Invokes the action for its side-effects on each value in the sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{System.Exception})">
      <summary>
            Invokes the action for its side-effects on each value in the sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Do``1(System.Collections.Generic.IEnumerable{``0},System.IObserver{``0})">
      <summary>
            Invokes the action for its side-effects on each value in the sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
      <summary>
            Invokes the action for its side-effects on each value in the sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Finally``1(System.Collections.Generic.IEnumerable{``0},System.Action)">
      <summary>
            Invokes finallyAction after source sequence terminates normally or by an exception.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.BufferWithCount``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
      <summary>
            Projects each value of an enumerable sequence into a buffer.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.BufferWithCount``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Projects each value of an enumerable sequence into a buffer.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Defer``1(System.Func{System.Collections.Generic.IEnumerable{``0}})">
      <summary>
            Returns a sequence that invokes the enumerableFactory function whenever the sequence gets enumerated.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Materialize``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Materializes the implicit notifications of a sequence as explicit notification values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Dematerialize``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.Notification{``0}})">
      <summary>
            Dematerializes the explicit notification values of a sequence as implicit notifications.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Scan``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
      <summary>
            Applies an accumulator function over a sequence and returns each intermediate result.  
            The specified seed value is used as the initial accumulator value.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Scan``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
      <summary>
            Applies an accumulator function over a sequence and returns each intermediate result.  
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Scan0``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
      <summary>
            Applies an accumulator function over an observable sequence and returns each intermediate result.  
            The specified seed value is prepended to the sequence once a message comes in.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.DistinctUntilChanged``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Returns a sequence that contains only distinct contiguous values according to the keySelector and comparer.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.DistinctUntilChanged``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Returns an observable sequence that contains only distinct contiguous values according to the comparer.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.DistinctUntilChanged``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
            Returns an observable sequence that contains only distinct contiguous values according to the keySelector.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.DistinctUntilChanged``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns an observable sequence that contains only distinct contiguous values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.While``1(System.Func{System.Boolean},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Repeats source as long as condition holds.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.If``1(System.Func{System.Boolean},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            If condition is true, then thenSource else elseSource.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.DoWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Boolean})">
      <summary>
            Repeats source as long as condition holds.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Case``2(System.Func{``0},System.Collections.Generic.IDictionary{``0,System.Collections.Generic.IEnumerable{``1}},System.Collections.Generic.IEnumerable{``1})">
      <summary>
            Uses selector to determine which source in sources to use, uses defaultSource if no match is found.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Case``2(System.Func{``0},System.Collections.Generic.IDictionary{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>
            Uses selector to determine which source in sources to use, empty if no match is found.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.For``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>
            Concatenates the observable sequences obtained by running the resultSelector for each element in source.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Let``2(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>
            Returns an observable sequence that invokes selector with value whenever a new observer subscribes.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Bypasses a specified number of values at the end of an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Returns a specified number of contiguous values from the end of an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Remotable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Makes a sequence remotable.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
      <summary>
            Projects each value of a sequence to a sequence and flattens the resulting sequences into one sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.OnErrorResumeNext``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Continues the source sequence with the next sequence whether 
            the source sequence terminates normally or by an exception.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.OnErrorResumeNext``1(System.Collections.Generic.IEnumerable{``0}[])">
      <summary>
            Continues a sequence that is terminated normally or by an exception with the next sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.OnErrorResumeNext``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
      <summary>
            Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Concat``1(System.Collections.Generic.IEnumerable{``0}[])">
      <summary>
            Concatenates all sequences.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Concat``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
      <summary>
            Concatenates all sequences.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Catch``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Continues a sequence that is terminated by an exception with the next sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Catch``1(System.Collections.Generic.IEnumerable{``0}[])">
      <summary>
            Continues a sequence that is terminated by an exception with the next sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Catch``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
      <summary>
            Continues a sequence that is terminated by an exception with the next sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Catch``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1,System.Collections.Generic.IEnumerable{``0}})">
      <summary>
            Continues a sequence that is terminated by an exception of the specified type with the sequence
            produced by the handler.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.ForkJoin``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
      <summary>
            Runs all sequences and combines their last values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.ForkJoin``1(System.Collections.Generic.IEnumerable{``0}[])">
      <summary>
            Runs all sequences and combines their last values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Return``1(``0)">
      <summary>
            Returns a sequence that contains a single value.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Throw``1(System.Exception)">
      <summary>
            Returns a sequence that terminates with an exception.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1})">
      <summary>
            Generates a sequence by iterating a state from an initial state until
            the condition fails.  For each state, a value is generated dependent
            on the state.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Using``2(System.Func{``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0}})">
      <summary>
            Retrieves resource from resourceSelector for use in resourceUsage and disposes 
            the resource once the resulting sequence terminates.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Repeat``1(``0)">
      <summary>
            Generates a sequence that contains one repeated value.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Repeat``1(``0,System.Int32)">
      <summary>
            Generates an observable sequence that contains one repeated value.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Repeat``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Repeats the sequence indefinately.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Repeat``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Repeats the sequence repeatCount times.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Retry``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Repeats the sequence until it successfully terminates.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Retry``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Repeats the source  sequence the retryCount times or until it successfully terminates.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Min``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>
            Returns the element with the minimum value by using a specified comparer.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
            Returns the element with the minimum key value by using the default comparer for keys.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
            Returns the element with the minimum key value by using a specified key comparer.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Max``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>
            Returns the element with the minimum value by using a specified comparer.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
            Returns the element with the maximum key value by using the default comparer for keys.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
            Returns the element with the maximum key value by using a specified key comparer.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Run``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Evaluates the sequence for its side-effects.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Run``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
      <summary>
            Evaluates the sequence and invokes the action for its side-effects on each value in the sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Run``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{System.Exception})">
      <summary>
            Evaluates the sequence and invokes the action for its side-effects on each value in the sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Run``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action)">
      <summary>
            Evaluates the sequence and invokes the action for its side-effects on each value in the sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Run``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
      <summary>
            Evaluates the sequence and invokes the action for its side-effects on each value in the sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Run``1(System.Collections.Generic.IEnumerable{``0},System.IObserver{``0})">
      <summary>
            Evaluates the sequence and invokes the action for its side-effects on each value in the sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Determines whether an observable sequence is empty.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Let``2(System.Collections.Generic.IEnumerable{``0},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1}})">
      <summary>
            Bind the source to the parameter so that it can be used multiple times
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MemoizeAll``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Creates an enumerable that enumerates the original enumerable only once and caches its results.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Memoize``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Creates an enumerable that enumerates the original enumerable only once and caches its results.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Publish``2(System.Collections.Generic.IEnumerable{``0},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1}})">
      <summary>
            Publishes the values of source to each use of the bound parameter.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Publish``2(System.Collections.Generic.IEnumerable{``0},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1}},``0)">
      <summary>
            Publishes the values of single to each use of the bound parameter starting with an intial value.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Replay``2(System.Collections.Generic.IEnumerable{``0},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1}})">
      <summary>
            Replays the values of source to each use of the bound parameter.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Replay``2(System.Collections.Generic.IEnumerable{``0},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1}},System.Int32)">
      <summary>
            Replays bufferSize values of source to each use of the bound parameter.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Prune``2(System.Collections.Generic.IEnumerable{``0},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1}})">
      <summary>
            Replays the first value of source to each use of the bound parameter.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Share``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Shares cursor of all enumerators to the sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Memoize``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Creates an enumerable that enumerates the original enumerable only once and caches its results.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.AggregateEnumerable``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
      <summary>
            Applies an accumulator function over sequence. 
            The specified seed value is prepended to the sequence once a message comes in.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.AggregateEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
      <summary>
            Applies an accumulator function over an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.IsEmptyEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Determines whether an observable sequence is empty.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.AnyEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Determines whether an observable sequence contains any elements.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.AnyEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Determines whether any element of an observable sequence satisfies a condition.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.AllEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Determines whether all elements of an observable sequence satisfy a condition.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.ContainsEnumerable``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Determines whether an observable sequence contains a specified element by using a specified System.Collections.Generic.IEqualityComparer&lt;T&gt;.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.ContainsEnumerable``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>
            Determines whether an observable sequence contains a specified element by using the default equality comparer.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.CountEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns an System.Int32 that represents the total number of elements in an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.LongCountEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns an System.Int64 that represents the total number of elements in an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.SumEnumerable(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            Computes the sum of a sequence of System.Double values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.SumEnumerable(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
            Computes the sum of a sequence of System.Float values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.SumEnumerable(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
            Computes the sum of a sequence of System.Decimal values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.SumEnumerable(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Computes the sum of a sequence of System.Int32 values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.SumEnumerable(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
            Computes the sum of a sequence of System.Int64 values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.SumEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
            Computes the sum of a sequence of nullable System.Double values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.SumEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
            Computes the sum of a sequence of nullable System.Float values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.SumEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
            Computes the sum of a sequence of nullable System.Decimal values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.SumEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
            Computes the sum of a sequence of nullable System.Int32 values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.SumEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
            Computes the sum of a sequence of nullable System.Int64 values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinByEnumerable``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
            Returns the element in an observable sequence with the minimum key value.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinByEnumerable``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
            Returns the element in an observable sequence with the minimum key value.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns the minimum value in an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>
            Returns the minimum value in an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinEnumerable(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            Returns the minimum value in an observable sequence of System.Double values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinEnumerable(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
            Returns the minimum value in an observable sequence of System.Float values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinEnumerable(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
            Returns the minimum value in an observable sequence of System.Decimal values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinEnumerable(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Returns the minimum value in an observable sequence of System.Int32 values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinEnumerable(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
            Returns the minimum value in an observable sequence of System.Int64 values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
            Returns the minimum value in an observable sequence of nullable System.Double values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
            Returns the minimum value in an observable sequence of nullable System.Float values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
            Returns the minimum value in an observable sequence of nullable System.Decimal values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
            Returns the minimum value in an observable sequence of nullable System.Int32 values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
            Returns the minimum value in an observable sequence of nullable System.Int64 values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxByEnumerable``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
            Returns the element in an observable sequence with the minimum key value.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxByEnumerable``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
            Returns the element in an observable sequence with the minimum key value.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns the minimum value in an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>
            Returns the minimum value in an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxEnumerable(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            Returns the maximum value in an observable sequence of System.Double values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxEnumerable(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
            Returns the maximum value in an observable sequence of System.Float values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxEnumerable(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
            Returns the maximum value in an observable sequence of System.Decimal values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxEnumerable(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Returns the maximum value in an observable sequence of System.Int32 values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxEnumerable(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
            Returns the maximum value in an observable sequence of System.Int64 values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
            Returns the maximum value in an observable sequence of nullable System.Double values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
            Returns the maximum value in an observable sequence of nullable System.Float values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
            Returns the maximum value in an observable sequence of nullable System.Decimal values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
            Returns the maximum value in an observable sequence of nullable System.Int32 values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
            Returns the maximum value in an observable sequence of nullable System.Int64 values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.AverageEnumerable(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            Computes the AverageEnumerable of an observable sequence of System.Double values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.AverageEnumerable(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
            Computes the AverageEnumerable of an observable sequence of System.Float values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.AverageEnumerable(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
            Computes the AverageEnumerable of an observable sequence of System.Decimal values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.AverageEnumerable(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Computes the AverageEnumerable of an observable sequence of System.Int32 values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.AverageEnumerable(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
            Computes the AverageEnumerable of an observable sequence of System.Int64 values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.AverageEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
            Computes the AverageEnumerable of an observable sequence of nullable System.Double values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.AverageEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
            Computes the AverageEnumerable of an observable sequence of nullable System.Float values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.AverageEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
            Computes the AverageEnumerable of an observable sequence of nullable System.Decimal values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.AverageEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
            Computes the AverageEnumerable of an observable sequence of nullable System.Int32 values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.AverageEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
            Computes the AverageEnumerable of an observable sequence of nullable System.Int64 values.
            </summary>
    </member>
    <member name="T:System.Linq.Enumerator">
      <summary>
            Provides a set of static methods for creating enumerators.
            </summary>
    </member>
    <member name="M:System.Linq.Enumerator.AsEnumerator``1(System.Collections.Generic.IEnumerator{``0})">
      <summary>
            Hides the identity of an enumerator.
            </summary>
    </member>
    <member name="T:System.Collections.Generic.ISubject`2">
      <summary>
            Represents an object that is both an observable sequence as well as an observer.
            </summary>
    </member>
    <member name="T:System.Collections.Generic.ISubject`1">
      <summary>
            Represents an object that is both an observable sequence as well as an observer.
            </summary>
    </member>
    <member name="T:System.Collections.Generic.AsyncSubject`1">
      <summary>
            Represents the result of an asynchronous operation.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.AsyncSubject`1.#ctor">
      <summary>
            Creates a subject that can only receive one value and that value is cached for all future observations.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.AsyncSubject`1.#ctor(System.Concurrency.IScheduler)">
      <summary>
            Creates a subject that can only receive one value and that value is cached for all future observations.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.AsyncSubject`1.OnNext(`0)">
      <summary>
            Notifies all subscribed observers with the value.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.AsyncSubject`1.OnError(System.Exception)">
      <summary>
            Notifies all subscribed observers with the exception. 
            </summary>
    </member>
    <member name="M:System.Collections.Generic.AsyncSubject`1.OnCompleted">
      <summary>
            Notifies all subscribed observers of the end of the sequence.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.AsyncSubject`1.Subscribe(System.IObserver{`0})">
      <summary>
            Subscribes an observer to the subject.
            </summary>
    </member>
    <member name="T:System.Collections.Generic.ReplaySubject`1">
      <summary>
            Represents an object that is both an observable sequence as well as an observer.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.ReplaySubject`1.#ctor(System.Int32,System.TimeSpan,System.Concurrency.IScheduler)">
      <summary>
            Creates a replayable subject.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.ReplaySubject`1.#ctor(System.Int32,System.TimeSpan)">
      <summary>
            Creates a replayable subject.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.ReplaySubject`1.#ctor">
      <summary>
            Creates a replayable subject.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.ReplaySubject`1.#ctor(System.Concurrency.IScheduler)">
      <summary>
            Creates a replayable subject.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.ReplaySubject`1.#ctor(System.Int32,System.Concurrency.IScheduler)">
      <summary>
            Creates a replayable subject.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.ReplaySubject`1.#ctor(System.Int32)">
      <summary>
            Creates a replayable subject.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.ReplaySubject`1.#ctor(System.TimeSpan,System.Concurrency.IScheduler)">
      <summary>
            Creates a replayable subject.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.ReplaySubject`1.#ctor(System.TimeSpan)">
      <summary>
            Creates a replayable subject.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.ReplaySubject`1.OnNext(`0)">
      <summary>
            Notifies all subscribed observers with the value.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.ReplaySubject`1.OnError(System.Exception)">
      <summary>
            Notifies all subscribed observers with the exception.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.ReplaySubject`1.OnCompleted">
      <summary>
            Notifies all subscribed observers of the end of the sequence.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.ReplaySubject`1.Subscribe(System.IObserver{`0})">
      <summary>
            Subscribes an observer to the subject.
            </summary>
    </member>
    <member name="T:System.Collections.Generic.BehaviorSubject`1">
      <summary>
            Represents a value that changes over time.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.BehaviorSubject`1.#ctor(`0,System.Concurrency.IScheduler)">
      <summary>
            Creates a subject that caches its last value and starts with the specified value.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.BehaviorSubject`1.#ctor(`0)">
      <summary>
            Creates a subject that caches its last value and starts with the specified value.
            </summary>
    </member>
    <member name="T:System.Collections.Generic.IConnectableObservable`1">
      <summary>
            Represents an observable that can be connected and disconnected.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.IConnectableObservable`1.Connect">
      <summary>
            Connects the observable.
            </summary>
    </member>
    <member name="T:System.Collections.Generic.ConnectableObservable`2">
      <summary>
            Represents an observable that can be connected and disconnected from its source.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.ConnectableObservable`2.#ctor(System.IObservable{`1},System.Collections.Generic.ISubject{`1,`0})">
      <summary>
            Creates an observable that can be connected and disconnected from its source.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.ConnectableObservable`2.Connect">
      <summary>
            Connects the observable to its source.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.ConnectableObservable`2.Subscribe(System.IObserver{`0})">
      <summary>
            Subscribes an observer to the observable sequence.
            </summary>
    </member>
    <member name="T:System.Collections.Generic.ConnectableObservable`1">
      <summary>
            Represents an observable that can be connected and disconnected from its source.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.ConnectableObservable`1.#ctor(System.IObservable{`0},System.Collections.Generic.ISubject{`0})">
      <summary>
            Creates an observable that can be connected and disconnected from its source.
            </summary>
    </member>
    <member name="T:System.IQbservable">
      <summary>
            Provides functionality to evaluate queries against a specific data source wherein the type of the data is not specified.
            </summary>
    </member>
    <member name="P:System.IQbservable.ElementType">
      <summary>
            Gets the type of the element(s) that are returned when the expression tree associated with this instance of IQbservable is executed.
            </summary>
    </member>
    <member name="P:System.IQbservable.Expression">
      <summary>
            Gets the expression tree that is associated with the instance of IQbservable.
            </summary>
    </member>
    <member name="P:System.IQbservable.Provider">
      <summary>
            Gets the query provider that is associated with this data source.
            </summary>
    </member>
    <member name="T:System.IQbservable`1">
      <summary>
            Provides functionality to evaluate queries against a specific data source wherein the type of the data is known.
            </summary>
    </member>
    <member name="T:System.IQbservableProvider">
      <summary>
            Defines methods to create and execute queries that are described by an IQbservable object.
            </summary>
    </member>
    <member name="M:System.IQbservableProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>
            Constructs an IQbservable&gt;TResult&lt; object that can evaluate the query represented by a specified expression tree.
            </summary>
    </member>
    <member name="T:System.Joins.Pattern">
      <summary>
            Represents a join pattern.
            </summary>
    </member>
    <member name="T:System.Joins.Pattern`1">
      <summary>
            Represents a join pattern.
            </summary>
    </member>
    <member name="M:System.Joins.Pattern`1.Then``1(System.Func{`0,``0})">
      <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
    </member>
    <member name="T:System.Joins.Pattern`2">
      <summary>
            Represents a join pattern.
            </summary>
    </member>
    <member name="M:System.Joins.Pattern`2.And``1(System.IObservable{``0})">
      <summary>
            Matches when all observable sequences have an available value.
            </summary>
    </member>
    <member name="M:System.Joins.Pattern`2.Then``1(System.Func{`0,`1,``0})">
      <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
    </member>
    <member name="T:System.Joins.Pattern`3">
      <summary>
            Represents a join pattern.
            </summary>
    </member>
    <member name="M:System.Joins.Pattern`3.And``1(System.IObservable{``0})">
      <summary>
            Matches when all observable sequences have an available value.
            </summary>
    </member>
    <member name="M:System.Joins.Pattern`3.Then``1(System.Func{`0,`1,`2,``0})">
      <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
    </member>
    <member name="T:System.Joins.Pattern`4">
      <summary>
            Represents a join pattern.
            </summary>
    </member>
    <member name="M:System.Joins.Pattern`4.And``1(System.IObservable{``0})">
      <summary>
            Matches when all observable sequences have an available value.
            </summary>
    </member>
    <member name="M:System.Joins.Pattern`4.Then``1(System.Func{`0,`1,`2,`3,``0})">
      <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
    </member>
    <member name="T:System.Joins.Pattern`5">
      <summary>
            Represents a join pattern.
            </summary>
    </member>
    <member name="M:System.Joins.Pattern`5.And``1(System.IObservable{``0})">
      <summary>
            Matches when all observable sequences have an available value.
            </summary>
    </member>
    <member name="M:System.Joins.Pattern`5.Then``1(System.Func{`0,`1,`2,`3,`4,``0})">
      <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
    </member>
    <member name="T:System.Joins.Pattern`6">
      <summary>
            Represents a join pattern.
            </summary>
    </member>
    <member name="M:System.Joins.Pattern`6.And``1(System.IObservable{``0})">
      <summary>
            Matches when all observable sequences have an available value.
            </summary>
    </member>
    <member name="M:System.Joins.Pattern`6.Then``1(System.Func{`0,`1,`2,`3,`4,`5,``0})">
      <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
    </member>
    <member name="T:System.Joins.Pattern`7">
      <summary>
            Represents a join pattern.
            </summary>
    </member>
    <member name="M:System.Joins.Pattern`7.And``1(System.IObservable{``0})">
      <summary>
            Matches when all observable sequences have an available value.
            </summary>
    </member>
    <member name="M:System.Joins.Pattern`7.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,``0})">
      <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
    </member>
    <member name="T:System.Joins.Pattern`8">
      <summary>
            Represents a join pattern.
            </summary>
    </member>
    <member name="M:System.Joins.Pattern`8.And``1(System.IObservable{``0})">
      <summary>
            Matches when all observable sequences have an available value.
            </summary>
    </member>
    <member name="M:System.Joins.Pattern`8.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0})">
      <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
    </member>
    <member name="T:System.Joins.Pattern`9">
      <summary>
            Represents a join pattern.
            </summary>
    </member>
    <member name="M:System.Joins.Pattern`9.And``1(System.IObservable{``0})">
      <summary>
            Matches when all observable sequences have an available value.
            </summary>
    </member>
    <member name="M:System.Joins.Pattern`9.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0})">
      <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
    </member>
    <member name="T:System.Joins.Pattern`10">
      <summary>
            Represents a join pattern.
            </summary>
    </member>
    <member name="M:System.Joins.Pattern`10.And``1(System.IObservable{``0})">
      <summary>
            Matches when all observable sequences have an available value.
            </summary>
    </member>
    <member name="M:System.Joins.Pattern`10.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,``0})">
      <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
    </member>
    <member name="T:System.Joins.Pattern`11">
      <summary>
            Represents a join pattern.
            </summary>
    </member>
    <member name="M:System.Joins.Pattern`11.And``1(System.IObservable{``0})">
      <summary>
            Matches when all observable sequences have an available value.
            </summary>
    </member>
    <member name="M:System.Joins.Pattern`11.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,``0})">
      <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
    </member>
    <member name="T:System.Joins.Pattern`12">
      <summary>
            Represents a join pattern.
            </summary>
    </member>
    <member name="M:System.Joins.Pattern`12.And``1(System.IObservable{``0})">
      <summary>
            Matches when all observable sequences have an available value.
            </summary>
    </member>
    <member name="M:System.Joins.Pattern`12.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,``0})">
      <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
    </member>
    <member name="T:System.Joins.Pattern`13">
      <summary>
            Represents a join pattern.
            </summary>
    </member>
    <member name="M:System.Joins.Pattern`13.And``1(System.IObservable{``0})">
      <summary>
            Matches when all observable sequences have an available value.
            </summary>
    </member>
    <member name="M:System.Joins.Pattern`13.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,``0})">
      <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
    </member>
    <member name="T:System.Joins.Pattern`14">
      <summary>
            Represents a join pattern.
            </summary>
    </member>
    <member name="M:System.Joins.Pattern`14.And``1(System.IObservable{``0})">
      <summary>
            Matches when all observable sequences have an available value.
            </summary>
    </member>
    <member name="M:System.Joins.Pattern`14.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,``0})">
      <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
    </member>
    <member name="T:System.Joins.Pattern`15">
      <summary>
            Represents a join pattern.
            </summary>
    </member>
    <member name="M:System.Joins.Pattern`15.And``1(System.IObservable{``0})">
      <summary>
            Matches when all observable sequences have an available value.
            </summary>
    </member>
    <member name="M:System.Joins.Pattern`15.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,``0})">
      <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
    </member>
    <member name="T:System.Joins.Pattern`16">
      <summary>
            Represents a join pattern.
            </summary>
    </member>
    <member name="M:System.Joins.Pattern`16.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,``0})">
      <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
    </member>
    <member name="T:System.Joins.Plan`1">
      <summary>
            Represents an execution plan for join patterns.
            </summary>
    </member>
    <member name="T:System.Linq.Notification">
      <summary>
            Provides a set of static methods for subscribing delegates to observables.
            </summary>
    </member>
    <member name="M:System.Linq.Notification.ToObservable``1(System.Collections.Generic.Notification{``0})">
      <summary>
            Returns an observable sequence with a single notification.
            </summary>
    </member>
    <member name="M:System.Linq.Notification.ToObservable``1(System.Collections.Generic.Notification{``0},System.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence with a single notification.
            </summary>
    </member>
    <member name="T:System.Linq.Observable">
      <summary>
            Provides a set of static methods for query operations over observable sequences.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Aggregate``2(System.IObservable{``0},``1,System.Func{``1,``0,``1})">
      <summary>
            Applies an accumulator function over an observable sequence. 
            The specified seed value is prepended to the sequence once a message comes in.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Aggregate``1(System.IObservable{``0},System.Func{``0,``0,``0})">
      <summary>
            Applies an accumulator function over an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.IsEmpty``1(System.IObservable{``0})">
      <summary>
            Determines whether an observable sequence is empty.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Any``1(System.IObservable{``0})">
      <summary>
            Determines whether an observable sequence contains any elements.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Any``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Determines whether any element of an observable sequence satisfies a condition.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.All``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Determines whether all elements of an observable sequence satisfy a condition.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Contains``1(System.IObservable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Determines whether an observable sequence contains a specified element by using a specified System.Collections.Generic.IEqualityComparer&lt;T&gt;.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Contains``1(System.IObservable{``0},``0)">
      <summary>
            Determines whether an observable sequence contains a specified element by using the default equality comparer.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Count``1(System.IObservable{``0})">
      <summary>
            Returns an System.Int32 that represents the total number of elements in an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.LongCount``1(System.IObservable{``0})">
      <summary>
            Returns an System.Int64 that represents the total number of elements in an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Sum(System.IObservable{System.Double})">
      <summary>
            Computes the sum of a sequence of System.Double values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Sum(System.IObservable{System.Single})">
      <summary>
            Computes the sum of a sequence of System.Float values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Sum(System.IObservable{System.Decimal})">
      <summary>
            Computes the sum of a sequence of System.Decimal values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Sum(System.IObservable{System.Int32})">
      <summary>
            Computes the sum of a sequence of System.Int32 values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Sum(System.IObservable{System.Int64})">
      <summary>
            Computes the sum of a sequence of System.Int64 values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Sum(System.IObservable{System.Nullable{System.Double}})">
      <summary>
            Computes the sum of a sequence of nullable System.Double values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Sum(System.IObservable{System.Nullable{System.Single}})">
      <summary>
            Computes the sum of a sequence of nullable System.Float values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Sum(System.IObservable{System.Nullable{System.Decimal}})">
      <summary>
            Computes the sum of a sequence of nullable System.Decimal values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Sum(System.IObservable{System.Nullable{System.Int32}})">
      <summary>
            Computes the sum of a sequence of nullable System.Int32 values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Sum(System.IObservable{System.Nullable{System.Int64}})">
      <summary>
            Computes the sum of a sequence of nullable System.Int64 values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.MinBy``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>
            Returns the element in an observable sequence with the minimum key value.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.MinBy``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
            Returns the element in an observable sequence with the minimum key value.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Min``1(System.IObservable{``0})">
      <summary>
            Returns the minimum value in an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Min``1(System.IObservable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>
            Returns the minimum value in an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Min(System.IObservable{System.Double})">
      <summary>
            Returns the minimum value in an observable sequence of System.Double values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Min(System.IObservable{System.Single})">
      <summary>
            Returns the minimum value in an observable sequence of System.Float values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Min(System.IObservable{System.Decimal})">
      <summary>
            Returns the minimum value in an observable sequence of System.Decimal values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Min(System.IObservable{System.Int32})">
      <summary>
            Returns the minimum value in an observable sequence of System.Int32 values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Min(System.IObservable{System.Int64})">
      <summary>
            Returns the minimum value in an observable sequence of System.Int64 values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Min(System.IObservable{System.Nullable{System.Double}})">
      <summary>
            Returns the minimum value in an observable sequence of nullable System.Double values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Min(System.IObservable{System.Nullable{System.Single}})">
      <summary>
            Returns the minimum value in an observable sequence of nullable System.Float values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Min(System.IObservable{System.Nullable{System.Decimal}})">
      <summary>
            Returns the minimum value in an observable sequence of nullable System.Decimal values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Min(System.IObservable{System.Nullable{System.Int32}})">
      <summary>
            Returns the minimum value in an observable sequence of nullable System.Int32 values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Min(System.IObservable{System.Nullable{System.Int64}})">
      <summary>
            Returns the minimum value in an observable sequence of nullable System.Int64 values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.MaxBy``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>
            Returns the element in an observable sequence with the minimum key value.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.MaxBy``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
            Returns the element in an observable sequence with the minimum key value.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Max``1(System.IObservable{``0})">
      <summary>
            Returns the minimum value in an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Max``1(System.IObservable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>
            Returns the minimum value in an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Max(System.IObservable{System.Double})">
      <summary>
            Returns the maximum value in an observable sequence of System.Double values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Max(System.IObservable{System.Single})">
      <summary>
            Returns the maximum value in an observable sequence of System.Float values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Max(System.IObservable{System.Decimal})">
      <summary>
            Returns the maximum value in an observable sequence of System.Decimal values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Max(System.IObservable{System.Int32})">
      <summary>
            Returns the maximum value in an observable sequence of System.Int32 values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Max(System.IObservable{System.Int64})">
      <summary>
            Returns the maximum value in an observable sequence of System.Int64 values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Max(System.IObservable{System.Nullable{System.Double}})">
      <summary>
            Returns the maximum value in an observable sequence of nullable System.Double values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Max(System.IObservable{System.Nullable{System.Single}})">
      <summary>
            Returns the maximum value in an observable sequence of nullable System.Float values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Max(System.IObservable{System.Nullable{System.Decimal}})">
      <summary>
            Returns the maximum value in an observable sequence of nullable System.Decimal values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Max(System.IObservable{System.Nullable{System.Int32}})">
      <summary>
            Returns the maximum value in an observable sequence of nullable System.Int32 values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Max(System.IObservable{System.Nullable{System.Int64}})">
      <summary>
            Returns the maximum value in an observable sequence of nullable System.Int64 values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Average(System.IObservable{System.Double})">
      <summary>
            Computes the average of an observable sequence of System.Double values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Average(System.IObservable{System.Single})">
      <summary>
            Computes the average of an observable sequence of System.Float values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Average(System.IObservable{System.Decimal})">
      <summary>
            Computes the average of an observable sequence of System.Decimal values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Average(System.IObservable{System.Int32})">
      <summary>
            Computes the average of an observable sequence of System.Int32 values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Average(System.IObservable{System.Int64})">
      <summary>
            Computes the average of an observable sequence of System.Int64 values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Average(System.IObservable{System.Nullable{System.Double}})">
      <summary>
            Computes the average of an observable sequence of nullable System.Double values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Average(System.IObservable{System.Nullable{System.Single}})">
      <summary>
            Computes the average of an observable sequence of nullable System.Float values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Average(System.IObservable{System.Nullable{System.Decimal}})">
      <summary>
            Computes the average of an observable sequence of nullable System.Decimal values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Average(System.IObservable{System.Nullable{System.Int32}})">
      <summary>
            Computes the average of an observable sequence of nullable System.Int32 values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Average(System.IObservable{System.Nullable{System.Int64}})">
      <summary>
            Computes the average of an observable sequence of nullable System.Int64 values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromAsyncPattern``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0})">
      <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromAsyncPattern``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1})">
      <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromAsyncPattern``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2})">
      <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromAsyncPattern``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3})">
      <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromAsyncPattern``5(System.Func{``0,``1,``2,``3,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``4})">
      <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromAsyncPattern``6(System.Func{``0,``1,``2,``3,``4,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``5})">
      <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromAsyncPattern``7(System.Func{``0,``1,``2,``3,``4,``5,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``6})">
      <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromAsyncPattern``8(System.Func{``0,``1,``2,``3,``4,``5,``6,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``7})">
      <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromAsyncPattern``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``8})">
      <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromAsyncPattern``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``9})">
      <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromAsyncPattern``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``10})">
      <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromAsyncPattern``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``11})">
      <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromAsyncPattern``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``12})">
      <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromAsyncPattern``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``13})">
      <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromAsyncPattern``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``14})">
      <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``1(System.Func{``0})">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``1(System.Func{``0},System.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``2(System.Func{``0,``1})">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``2(System.Func{``0,``1},System.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``3(System.Func{``0,``1,``2})">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``3(System.Func{``0,``1,``2},System.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``4(System.Func{``0,``1,``2,``3})">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``4(System.Func{``0,``1,``2,``3},System.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``5(System.Func{``0,``1,``2,``3,``4})">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``5(System.Func{``0,``1,``2,``3,``4},System.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``6(System.Func{``0,``1,``2,``3,``4,``5})">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``6(System.Func{``0,``1,``2,``3,``4,``5},System.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},System.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},System.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync(System.Action)">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync(System.Action,System.Concurrency.IScheduler)">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``1(System.Action{``0})">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``1(System.Action{``0},System.Concurrency.IScheduler)">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``2(System.Action{``0,``1})">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``2(System.Action{``0,``1},System.Concurrency.IScheduler)">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``3(System.Action{``0,``1,``2})">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``3(System.Action{``0,``1,``2},System.Concurrency.IScheduler)">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``4(System.Action{``0,``1,``2,``3})">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``4(System.Action{``0,``1,``2,``3},System.Concurrency.IScheduler)">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``5(System.Action{``0,``1,``2,``3,``4})">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``5(System.Action{``0,``1,``2,``3,``4},System.Concurrency.IScheduler)">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``6(System.Action{``0,``1,``2,``3,``4,``5})">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``6(System.Action{``0,``1,``2,``3,``4,``5},System.Concurrency.IScheduler)">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``7(System.Action{``0,``1,``2,``3,``4,``5,``6})">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``7(System.Action{``0,``1,``2,``3,``4,``5,``6},System.Concurrency.IScheduler)">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Concurrency.IScheduler)">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Concurrency.IScheduler)">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Concurrency.IScheduler)">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Concurrency.IScheduler)">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Concurrency.IScheduler)">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Concurrency.IScheduler)">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Concurrency.IScheduler)">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Concurrency.IScheduler)">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToAsync``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},System.Concurrency.IScheduler)">
      <summary>
            Converts the action into an asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Start``1(System.Func{``0})">
      <summary>
            Invokes the function asynchronously.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Start``1(System.Func{``0},System.Concurrency.IScheduler)">
      <summary>
            Invokes the function asynchronously.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Start(System.Action)">
      <summary>
            Invokes the action asynchronously.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Start(System.Action,System.Concurrency.IScheduler)">
      <summary>
            Invokes the action asynchronously.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromAsyncPattern(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromAsyncPattern``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromAsyncPattern``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromAsyncPattern``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromAsyncPattern``4(System.Func{``0,``1,``2,``3,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromAsyncPattern``5(System.Func{``0,``1,``2,``3,``4,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromAsyncPattern``6(System.Func{``0,``1,``2,``3,``4,``5,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromAsyncPattern``7(System.Func{``0,``1,``2,``3,``4,``5,``6,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromAsyncPattern``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromAsyncPattern``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromAsyncPattern``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromAsyncPattern``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromAsyncPattern``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromAsyncPattern``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromAsyncPattern``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.GetAwaiter``1(System.IObservable{``0})">
      <summary>
            Returns an awaiter that lists all values of the observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Let``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}})">
      <summary>
            Bind the source to the parameter without sharing subscription side-effects.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.RefCount``1(System.Collections.Generic.IConnectableObservable{``0})">
      <summary>
            Returns an observable sequence that stays connected to the source as long as there is at least one subscription to the observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Publish``2(System.IObservable{``0},System.Collections.Generic.ISubject{``0,``1})">
      <summary>
            Returns an observable sequence that stays connected to the source as long as there is at least one subscription to the observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Multicast``2(System.IObservable{``0},System.Collections.Generic.ISubject{``0,``1})">
      <summary>
            Returns an observable sequence that stays connected to the source as long as there is at least one subscription to the observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Publish``3(System.IObservable{``0},System.Collections.Generic.ISubject{``0,``1},System.Func{System.IObservable{``1},System.IObservable{``2}})">
      <summary>
            Returns an observable sequence that stays connected to the source as long as there is at least one subscription to the observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToEnumerable``1(System.IObservable{``0})">
      <summary>
            Converts an observable sequence to an enumerable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.GetEnumerator``1(System.IObservable{``0})">
      <summary>
            Returns an enumerator that enumerates all values of the observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.MostRecent``1(System.IObservable{``0},``0)">
      <summary>
            Samples the most recent value (buffer of size one without consumption) in an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Next``1(System.IObservable{``0})">
      <summary>
            Samples the next value (blocking without buffering) from in an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Latest``1(System.IObservable{``0})">
      <summary>
            Samples the most recent value (buffer of size one with consumption) in an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.First``1(System.IObservable{``0})">
      <summary>
            Returns the first value of an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FirstOrDefault``1(System.IObservable{``0})">
      <summary>
            Returns the first value of an observable sequence, or a default value if no value is found.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Last``1(System.IObservable{``0})">
      <summary>
            Returns the last value of an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.LastOrDefault``1(System.IObservable{``0})">
      <summary>
            Returns the last value of an observable sequence, or a default value if no value is found.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Single``1(System.IObservable{``0})">
      <summary>
            Returns the only value of an observable sequence, and throws an exception if there is not exactly one value in the observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.SingleOrDefault``1(System.IObservable{``0})">
      <summary>
            Returns the only value of an observable sequence, or a default value if the observable sequence is empty; this method throws an exception if there is more than one value in the observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Run``1(System.IObservable{``0})">
      <summary>
            Invokes the observable sequence for its side-effects and blocks till the sequence is terminated.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Run``1(System.IObservable{``0},System.IObserver{``0})">
      <summary>
            Invokes the observer methods for their side-effects and blocks till the sequence is terminated.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Run``1(System.IObservable{``0},System.Action{``0})">
      <summary>
            Invokes the action for its side-effects on each value in the observable sequence and blocks till the sequence is terminated.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Run``1(System.IObservable{``0},System.Action{``0},System.Action)">
      <summary>
            Invokes the action for its side-effects on each value in the observable sequence and blocks till the sequence is terminated.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Run``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception})">
      <summary>
            Invokes the action for its side-effects on each value in the observable sequence and blocks till the sequence is terminated.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Run``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
      <summary>
            Invokes the action for its side-effects on each value in the observable sequence and blocks till the sequence is terminated.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ObserveOn``1(System.IObservable{``0},System.Concurrency.IScheduler)">
      <summary>
            Asynchronously notify observers using the scheduler.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.SubscribeOn``1(System.IObservable{``0},System.Concurrency.IScheduler)">
      <summary>
            Asynchronously subscribes and unsubscribes observers using scheduler.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ObserveOn``1(System.IObservable{``0},System.Concurrency.DispatcherScheduler)">
      <summary>
            Asynchronously notify observers using the scheduler.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ObserveOnDispatcher``1(System.IObservable{``0})">
      <summary>
            Asynchronously notify observers using the dispatcher from the current thread.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.SubscribeOnDispatcher``1(System.IObservable{``0})">
      <summary>
            Asynchronously subscribes and unsubscribes observers using the dispatcher from the current thread.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.SubscribeOn``1(System.IObservable{``0},System.Concurrency.DispatcherScheduler)">
      <summary>
            Asynchronously subscribes and unsubscribes observers using the scheduler.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.SubscribeOn``1(System.IObservable{``0},System.Threading.SynchronizationContext)">
      <summary>
            Asynchronously subscribes and unsubscribes observers on the synchronization context.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ObserveOn``1(System.IObservable{``0},System.Threading.SynchronizationContext)">
      <summary>
            Asynchronously notify observers on the synchronization context.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.SubscribeOn``1(System.IObservable{``0},System.Concurrency.ControlScheduler)">
      <summary>
            Asynchronously subscribes and unsubscribes observers using the scheduler.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ObserveOn``1(System.IObservable{``0},System.Concurrency.ControlScheduler)">
      <summary>
            Asynchronously notify observers using the scheduler.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Synchronize``1(System.IObservable{``0})">
      <summary>
            Synchronizes the observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Synchronize``1(System.IObservable{``0},System.Object)">
      <summary>
            Synchronizes the observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Never``1">
      <summary>
            Returns a non-terminating observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Empty``1">
      <summary>
            Returns an empty observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Empty``1(System.Concurrency.IScheduler)">
      <summary>
            Returns an empty observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Return``1(``0)">
      <summary>
            Returns an observable sequence that contains a single value.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Return``1(``0,System.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence that contains a single value.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Throw``1(System.Exception)">
      <summary>
            Returns an observable sequence that terminates with an exception.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Throw``1(System.Exception,System.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence that terminates with an exception.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Subscribe``1(System.Collections.Generic.IEnumerable{``0},System.IObserver{``0})">
      <summary>
            Subscribes an observer to an enumerable sequence.  Returns an object that can be used to unsubscribe the observer from the enumerable.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Subscribe``1(System.Collections.Generic.IEnumerable{``0},System.IObserver{``0},System.Concurrency.IScheduler)">
      <summary>
            Subscribes an observer to an enumerable sequence.  Returns an object that can be used to unsubscribe the observer from the enumerable.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromEvent(System.Action{System.EventHandler},System.Action{System.EventHandler})">
      <summary>
            Returns an observable sequence that contains the values of the underlying .NET event.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromEvent``2(System.Func{System.EventHandler{``1},``0},System.Action{``0},System.Action{``0})">
      <summary>
            Returns an observable sequence that contains the values of the underlying .NET event.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromEvent``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}})">
      <summary>
            Returns an observable sequence that contains the values of the underlying .NET event.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.FromEvent``1(System.Object,System.String)">
      <summary>
            Returns an observable sequence that contains the values of the underlying .NET event.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1},System.Concurrency.IScheduler)">
      <summary>
            Generates an observable sequence by iterating a state from an initial state until
            the condition fails.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1})">
      <summary>
            Generates an observable sequence by iterating a state from an initial state until
            the condition fails.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Defer``1(System.Func{System.IObservable{``0}})">
      <summary>
            Returns an observable sequence that invokes the observableFactory function whenever a new observer subscribes.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Using``2(System.Func{``1},System.Func{``1,System.IObservable{``0}})">
      <summary>
            Retrieves resource from resourceSelector for use in resourceUsage and disposes 
            the resource once the resulting observable sequence terminates.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToObservable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Converts an enumerable sequence to an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ToObservable``1(System.Collections.Generic.IEnumerable{``0},System.Concurrency.IScheduler)">
      <summary>
            Converts an enumerable sequence to an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.CreateWithDisposable``1(System.Func{System.IObserver{``0},System.IDisposable})">
      <summary>
            Creates an observable sequence from the subscribe implementation.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Create``1(System.Func{System.IObserver{``0},System.Action})">
      <summary>
            Creates an observable sequence from the subscribe implementation.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Range(System.Int32,System.Int32)">
      <summary>
            Generates an observable sequence of integral numbers within a specified range.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Range(System.Int32,System.Int32,System.Concurrency.IScheduler)">
      <summary>
            Generates an observable sequence of integral numbers within a specified range.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Repeat``1(System.IObservable{``0})">
      <summary>
            Repeats the observable sequence indefinitely.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Repeat``1(System.IObservable{``0},System.Int32)">
      <summary>
            Repeats the observable sequence repeatCount times.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Retry``1(System.IObservable{``0})">
      <summary>
            Repeats the source observable sequence until it successfully terminates.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Retry``1(System.IObservable{``0},System.Int32)">
      <summary>
            Repeats the source observable sequence the retryCount times or until it successfully terminates.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Repeat``1(``0,System.Concurrency.IScheduler)">
      <summary>
            Generates an observable sequence that contains one repeated value.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Repeat``1(``0,System.Int32,System.Concurrency.IScheduler)">
      <summary>
            Generates an observable sequence that contains one repeated value.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Repeat``1(``0)">
      <summary>
            Generates an observable sequence that contains one repeated value.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Repeat``1(``0,System.Int32)">
      <summary>
            Generates an observable sequence that contains one repeated value.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.And``2(System.IObservable{``0},System.IObservable{``1})">
      <summary>
            Matches when both observable sequences have an available value.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Then``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>
            Matches when the observable sequence has an available value and projects the value.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Join``1(System.Joins.Plan{``0}[])">
      <summary>
            Joins together the results from several patterns.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Join``1(System.Collections.Generic.IEnumerable{System.Joins.Plan{``0}})">
      <summary>
            Joins together the results from several patterns.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Merge``1(System.IObservable{System.IObservable{``0}})">
      <summary>
            Merges an observable sequence of observable sequences into an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Switch``1(System.IObservable{System.IObservable{``0}})">
      <summary>
            Transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Concat``1(System.IObservable{``0},System.IObservable{``0})">
      <summary>
            Concatenates two observable sequences.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Concat``1(System.IObservable{``0}[])">
      <summary>
            Concatenates all the observable sequences.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Concat``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
      <summary>
            Concatenates all the observable sequences.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Catch``2(System.IObservable{``0},System.Func{``1,System.IObservable{``0}})">
      <summary>
            Continues an observable sequence that is terminated by an exception of the specified type with the observable sequence
            produced by the handler.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Catch``1(System.IObservable{``0},System.IObservable{``0})">
      <summary>
            Continues an observable sequence that is terminated by an exception with the next observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Catch``1(System.IObservable{``0}[])">
      <summary>
            Continues an observable sequence that is terminated by an exception with the next observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Catch``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
      <summary>
            Continues an observable sequence that is terminated by an exception with the next observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.OnErrorResumeNext``1(System.IObservable{``0},System.IObservable{``0})">
      <summary>
            Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.OnErrorResumeNext``1(System.IObservable{``0}[])">
      <summary>
            Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.OnErrorResumeNext``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
      <summary>
            Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Zip``3(System.IObservable{``0},System.IObservable{``1},System.Func{``0,``1,``2})">
      <summary>
            Merges two observable sequences into one observable sequence by using the selector function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Zip``3(System.IObservable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>
            Merges an observable sequence and an enumerable sequence into one observable sequence by using the selector function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.CombineLatest``3(System.IObservable{``0},System.IObservable{``1},System.Func{``0,``1,``2})">
      <summary>
            Merges two observable sequences into one observable sequence by using the selector function
            whenever one of the observable sequences has a new value.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})">
      <summary>
            Returns the observable sequence that reacts first.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Amb``1(System.IObservable{``0}[])">
      <summary>
            Returns the observable sequence that reacts first.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Amb``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
      <summary>
            Returns the observable sequence that reacts first.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ForkJoin``3(System.IObservable{``0},System.IObservable{``1},System.Func{``0,``1,``2})">
      <summary>
            Runs two observable sequences in parallel and combines their last values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ForkJoin``1(System.IObservable{``0}[])">
      <summary>
            Runs all observable sequences in parallel and combines their last values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.ForkJoin``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
      <summary>
            Runs all observable sequences in parallel and combines their last values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.TakeUntil``2(System.IObservable{``0},System.IObservable{``1})">
      <summary>
            Returns the values from the source observable sequence until the other observable sequence produces a value.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.SkipUntil``2(System.IObservable{``0},System.IObservable{``1})">
      <summary>
            Returns the values from the source observable sequence only after the other observable sequence produces a value.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Merge``1(System.IObservable{``0},System.IObservable{``0},System.Concurrency.IScheduler)">
      <summary>
            Merges two observable sequences into a single observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Merge``1(System.IObservable{``0},System.IObservable{``0})">
      <summary>
            Merges two observable sequences into a single observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Merge``1(System.IObservable{``0}[])">
      <summary>
            Merges all the observable sequences into a single observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Merge``1(System.Concurrency.IScheduler,System.IObservable{``0}[])">
      <summary>
            Merges all the observable sequences into a single observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Merge``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
      <summary>
            Merges all the observable sequences into a single observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Merge``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}},System.Concurrency.IScheduler)">
      <summary>
            Merges an observable sequence of observable sequences into an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Window``3(System.IObservable{``0},System.IObservable{``1},System.Func{``1,System.IObservable{``2}})">
      <summary>
            Projects each value in source to the windows defined by windowOpenings and windowClosing.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Window``2(System.IObservable{``0},System.Func{System.IObservable{``1}},System.Concurrency.IScheduler)">
      <summary>
            Projects each value in source to the windows defined by windowClosing.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Window``2(System.IObservable{``0},System.Func{System.IObservable{``1}})">
      <summary>
            Projects each value in source to the windows defined by windowClosing.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.AsQbservable``1(System.IObservable{``0})">
      <summary>
            Converts an observable sequence into a queryable observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Remotable``1(System.IObservable{``0})">
      <summary>
            Makes an observable sequence remotable.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Materialize``1(System.IObservable{``0})">
      <summary>
            Materializes the implicit notifications of an observable sequence as explicit notification values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Dematerialize``1(System.IObservable{System.Collections.Generic.Notification{``0}})">
      <summary>
            Dematerializes the explicit notification values of an observable sequence as implicit notifications.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.AsObservable``1(System.IObservable{``0})">
      <summary>
            Hides the identity of an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.BufferWithCount``1(System.IObservable{``0},System.Int32,System.Int32)">
      <summary>
            Projects each value of an observable sequence into a buffer.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.BufferWithCount``1(System.IObservable{``0},System.Int32)">
      <summary>
            Projects each value of an observable sequence into a buffer.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.StartWith``1(System.IObservable{``0},``0[])">
      <summary>
            Prepends a sequence values to an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.StartWith``1(System.IObservable{``0},System.Concurrency.IScheduler,``0[])">
      <summary>
            Prepends a sequence values to an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Scan``2(System.IObservable{``0},``1,System.Func{``1,``0,``1})">
      <summary>
            Applies an accumulator function over an observable sequence and returns each intermediate result.  
            The specified seed value is used as the initial accumulator value.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Scan0``2(System.IObservable{``0},``1,System.Func{``1,``0,``1})">
      <summary>
            Applies an accumulator function over an observable sequence and returns each intermediate result.  
            The specified seed value is prepended to the sequence once a message comes in.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Scan``1(System.IObservable{``0},System.Func{``0,``0,``0})">
      <summary>
            Applies an accumulator function over an observable sequence and returns each intermediate result.  
            </summary>
    </member>
    <member name="M:System.Linq.Observable.DistinctUntilChanged``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Returns an observable sequence that contains only distinct contiguous values according to the keySelector and comparer.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.DistinctUntilChanged``1(System.IObservable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Returns an observable sequence that contains only distinct contiguous values according to the comparer.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.DistinctUntilChanged``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>
            Returns an observable sequence that contains only distinct contiguous values according to the keySelector.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.DistinctUntilChanged``1(System.IObservable{``0})">
      <summary>
            Returns an observable sequence that contains only distinct contiguous values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Finally``1(System.IObservable{``0},System.Action)">
      <summary>
            Invokes finallyAction after source observable sequence terminates normally or by an exception.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Do``1(System.IObservable{``0},System.Action{``0})">
      <summary>
            Invokes the action for its side-effects on each value in the observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Do``1(System.IObservable{``0},System.Action{``0},System.Action)">
      <summary>
            Invokes the action for its side-effects on each value in the observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Do``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception})">
      <summary>
            Invokes the action for its side-effects on each value in the observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Do``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
      <summary>
            Invokes the action for its side-effects on each value in the observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Do``1(System.IObservable{``0},System.IObserver{``0})">
      <summary>
            Invokes the observer's methods for their side-effects.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.While``1(System.Func{System.Boolean},System.IObservable{``0})">
      <summary>
            Repeats source as long as condition holds.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.If``1(System.Func{System.Boolean},System.IObservable{``0},System.IObservable{``0})">
      <summary>
            If condition is true, then thenSource else elseSource.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.If``1(System.Func{System.Boolean},System.IObservable{``0})">
      <summary>
            If condition is true, then thenSource else elseSource.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.DoWhile``1(System.IObservable{``0},System.Func{System.Boolean})">
      <summary>
            Repeats source as long as condition holds.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Case``2(System.Func{``0},System.Collections.Generic.IDictionary{``0,System.IObservable{``1}},System.IObservable{``1})">
      <summary>
            Uses selector to determine which source in sources to use, uses defaultSource if no match is found.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Case``2(System.Func{``0},System.Collections.Generic.IDictionary{``0,System.IObservable{``1}},System.Concurrency.IScheduler)">
      <summary>
            Uses selector to determine which source in sources to use, empty if no match is found.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Case``2(System.Func{``0},System.Collections.Generic.IDictionary{``0,System.IObservable{``1}})">
      <summary>
            Uses selector to determine which source in sources to use, empty if no match is found.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.For``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.IObservable{``1}})">
      <summary>
            Concatenates the observable sequences obtained by running the resultSelector for each element in source.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Let``2(``0,System.Func{``0,System.IObservable{``1}})">
      <summary>
            Returns an observable sequence that invokes selector with value whenever a new observer subscribes.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.SkipLast``1(System.IObservable{``0},System.Int32)">
      <summary>
            Bypasses a specified number of values at the end of an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.TakeLast``1(System.IObservable{``0},System.Int32)">
      <summary>
            Returns a specified number of contiguous values from the end of an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Iterate``1(System.Func{System.IObserver{``0},System.Collections.Generic.IEnumerable{System.IObservable{System.Object}}})">
      <summary>
            Subscribes to each observable sequence returned by the iteratorMethod in sequence and returns the observable sequence of values sent to the observer given to the iteratorMethod.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Iterate(System.Func{System.Collections.Generic.IEnumerable{System.IObservable{System.Object}}})">
      <summary>
            Subscribes to each observable sequence returned by the iteratorMethod in sequence and returns the observable sequence of values sent to the observer given to the iteratorMethod.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Start``1(System.IObservable{``0})">
      <summary>
            Immediately subscribes to source and retains the values in the observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Drain``1(System.IObservable{``0},System.Func{``0,System.IObservable{System.Unit}})">
      <summary>
            Maintains a queue of values produced by source which are drained by pump.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Drain``1(System.IObservable{``0},System.Func{``0,System.IObservable{System.Unit}},System.Concurrency.IScheduler)">
      <summary>
            Maintains a queue of values produced by source which are drained by pump.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Select``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>
            Projects each value of an observable sequence into a new form.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Select``2(System.IObservable{``0},System.Func{``0,System.Int32,``1})">
      <summary>
            Projects each value of an observable sequence into a new form by incorporating the element's index.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Where``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Filters the values of an observable sequence based on a predicate.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Where``1(System.IObservable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>
            Filters the values of an observable sequence based on a predicate by incorporating the element's index.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.GroupBy``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>
            Groups the elements of an observable sequence and selects the resulting elements by using a specified function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.GroupBy``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Groups the elements of an observable sequence according to a specified key selector function and comparer.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.GroupBy``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>
            Groups the elements of an observable sequence according to a specified key selector function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.GroupBy``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Groups the elements of an observable sequence according to a specified key selector function and comparer and selects the resulting elements by using a specified function.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Take``1(System.IObservable{``0},System.Int32)">
      <summary>
            Returns a specified number of contiguous values from the start of an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Skip``1(System.IObservable{``0},System.Int32)">
      <summary>
            Bypasses a specified number of values in an observable sequence and then returns the remaining values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.TakeWhile``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns values from an observable sequence as long as a specified condition is true, and then skips the remaining values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.SkipWhile``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Bypasses values in an observable sequence as long as a specified condition is true and then returns the remaining values.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.SelectMany``2(System.IObservable{``0},System.IObservable{``1})">
      <summary>
            Projects each value of an observable sequence to an observable sequence and flattens the resulting observable sequences into one observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.IObservable{``1}})">
      <summary>
            Projects each value of an observable sequence to an observable sequence and flattens the resulting observable sequences into one observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.IObservable{``1}},System.Func{System.Exception,System.IObservable{``1}},System.Func{System.IObservable{``1}})">
      <summary>
            Projects each value of an observable sequence to an observable sequence and flattens the resulting observable sequences into one observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>
            Projects each value of an observable sequence to an observable sequence and flattens the resulting observable sequences into one observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.SelectMany``3(System.IObservable{``0},System.Func{``0,System.IObservable{``1}},System.Func{``0,``1,``2})">
      <summary>
            Projects each value of an observable sequence to an observable sequence, flattens the resulting observable sequences into one observable sequence, and invokes a result selector function on each value therein.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.OfType``1(System.IObservable{System.Object})">
      <summary>
            Filters values of the given type.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Cast``1(System.IObservable{System.Object})">
      <summary>
            Casts values to the given type.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Join``5(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``2}},System.Func{``1,System.IObservable{``3}},System.Func{``0,``1,``4})">
      <summary>
            Correlates the elements of two sequences based on overlapping durations.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.GroupJoin``5(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``2}},System.Func{``1,System.IObservable{``3}},System.Func{``0,System.IObservable{``1},``4})">
      <summary>
            Correlates the elements of two sequences based on overlapping durations, and groups the results.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Interval(System.TimeSpan)">
      <summary>
            Returns an observable sequence that produces a value after each period.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Interval(System.TimeSpan,System.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence that produces a value after each period.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Timer(System.TimeSpan)">
      <summary>
            Returns an observable sequence that produces a value after the dueTime has elapsed.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Timer(System.DateTimeOffset)">
      <summary>
            Returns an observable sequence that produces a value at dueTime.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Timer(System.TimeSpan,System.TimeSpan)">
      <summary>
            Returns an observable sequence that produces a value after dueTime has elapsed and then after each period.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Timer(System.DateTimeOffset,System.TimeSpan)">
      <summary>
            Returns an observable sequence that produces a value at dueTime and then after each period.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Timer(System.TimeSpan,System.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence that produces a value after the dueTime has elapsed.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Timer(System.DateTimeOffset,System.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence that produces a value at dueTime.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Timer(System.TimeSpan,System.TimeSpan,System.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence that produces a value after dueTime has elapsed and then after each period.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Timer(System.DateTimeOffset,System.TimeSpan,System.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence that produces a value at dueTime and then after each period.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Delay``1(System.IObservable{``0},System.TimeSpan)">
      <summary>
            Time shifts the observable sequence by dueTime.
            The relative time intervals between the values are preserved.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Delay``1(System.IObservable{``0},System.DateTimeOffset)">
      <summary>
            Time shifts the observable sequence by dueTime.
            The relative time intervals between the values are preserved.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Delay``1(System.IObservable{``0},System.TimeSpan,System.Concurrency.IScheduler)">
      <summary>
            Time shifts the observable sequence by dueTime.
            The relative time intervals between the values are preserved.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Delay``1(System.IObservable{``0},System.DateTimeOffset,System.Concurrency.IScheduler)">
      <summary>
            Time shifts the observable sequence by dueTime.
            The relative time intervals between the values are preserved.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Throttle``1(System.IObservable{``0},System.TimeSpan)">
      <summary>
            Ignores values from an observable sequence which are followed by another value before dueTime.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Throttle``1(System.IObservable{``0},System.TimeSpan,System.Concurrency.IScheduler)">
      <summary>
            Ignores values from an observable sequence which are followed by another value before dueTime.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.BufferWithTime``1(System.IObservable{``0},System.TimeSpan,System.TimeSpan,System.Concurrency.IScheduler)">
      <summary>
            Projects each value of an observable sequence into a buffer.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.BufferWithTime``1(System.IObservable{``0},System.TimeSpan,System.Concurrency.IScheduler)">
      <summary>
            Projects each value of an observable sequence into a buffer.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.BufferWithTime``1(System.IObservable{``0},System.TimeSpan,System.TimeSpan)">
      <summary>
            Projects each value of an observable sequence into a buffer.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.BufferWithTime``1(System.IObservable{``0},System.TimeSpan)">
      <summary>
            Projects each value of an observable sequence into a buffer.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.BufferWithTimeOrCount``1(System.IObservable{``0},System.TimeSpan,System.Int32,System.Concurrency.IScheduler)">
      <summary>
            Projects each value of an observable sequence into a buffer that's sent out when either it's full or a given amount of time has elapsed.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.BufferWithTimeOrCount``1(System.IObservable{``0},System.TimeSpan,System.Int32)">
      <summary>
            Projects each value of an observable sequence into a buffer that's sent out when either it's full or a given amount of time has elapsed.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.TimeInterval``1(System.IObservable{``0},System.Concurrency.IScheduler)">
      <summary>
            Records the time interval for each value of an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.TimeInterval``1(System.IObservable{``0})">
      <summary>
            Records the time interval for each value of an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.RemoveTimeInterval``1(System.IObservable{System.Linq.TimeInterval{``0}})">
      <summary>
            Removes the timestamp from each value of an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Timestamp``1(System.IObservable{``0},System.Concurrency.IScheduler)">
      <summary>
            Records the timestamp for each value of an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Timestamp``1(System.IObservable{``0})">
      <summary>
            Records the timestamp for each value of an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.RemoveTimestamp``1(System.IObservable{System.Linq.Timestamped{``0}})">
      <summary>
            Removes the timestamp from each value of an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Sample``1(System.IObservable{``0},System.TimeSpan,System.Concurrency.IScheduler)">
      <summary>
            Samples the observable sequence at each interval.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Sample``1(System.IObservable{``0},System.TimeSpan)">
      <summary>
            Samples the observable sequence at each interval.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan)">
      <summary>
            Returns either the observable sequence or an TimeoutException if dueTime elapses.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan,System.IObservable{``0})">
      <summary>
            Returns the source observable sequence or the other observable sequence if dueTime elapses.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset)">
      <summary>
            Returns either the observable sequence or an TimeoutException if dueTime elapses.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset,System.IObservable{``0})">
      <summary>
            Returns the source observable sequence or the other observable sequence if dueTime elapses.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan,System.Concurrency.IScheduler)">
      <summary>
            Returns either the observable sequence or an TimeoutException if dueTime elapses.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan,System.IObservable{``0},System.Concurrency.IScheduler)">
      <summary>
            Returns the source observable sequence or the other observable sequence if dueTime elapses.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset,System.Concurrency.IScheduler)">
      <summary>
            Returns either the observable sequence or an TimeoutException if dueTime elapses.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset,System.IObservable{``0},System.Concurrency.IScheduler)">
      <summary>
            Returns the source observable sequence or the other observable sequence if dueTime elapses.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.GenerateWithTime``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1},System.Func{``0,System.TimeSpan},System.Concurrency.IScheduler)">
      <summary>
            Generates an observable sequence by iterating a state from an initial state until
            the condition fails.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.GenerateWithTime``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1},System.Func{``0,System.TimeSpan})">
      <summary>
            Generates an observable sequence by iterating a state from an initial state until
            the condition fails.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.GenerateWithTime``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1},System.Func{``0,System.DateTimeOffset},System.Concurrency.IScheduler)">
      <summary>
            Generates an observable sequence by iterating a state from an initial state until
            the condition fails.
            </summary>
    </member>
    <member name="M:System.Linq.Observable.GenerateWithTime``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1},System.Func{``0,System.DateTimeOffset})">
      <summary>
            Generates an observable sequence by iterating a state from an initial state until
            the condition fails.
            </summary>
    </member>
    <member name="P:System.Linq.Observable.Provider">
      <summary>
            Gets the local Qbservable provider.
            </summary>
    </member>
    <member name="T:System.Linq.ObservableAwaiter`1">
      <summary>
            Represents an awaiter that lists all values of the underlying observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.ObservableAwaiter`1.BeginAwait(System.Action)">
      <summary>
            Starts the subscription of the underlying observable sequence and calls callback upon completion of the observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.ObservableAwaiter`1.EndAwait">
      <summary>
            Returns a list containing all values of the underlying observable sequence.
            </summary>
    </member>
    <member name="T:System.ObservableExtensions">
      <summary>
            Provides a set of static methods for subscribing delegates to observables.
            </summary>
    </member>
    <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0})">
      <summary>
            Evaluates the observable sequence.
            </summary>
    </member>
    <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0})">
      <summary>
            Subscribes a value handler to an observable sequence.
            </summary>
    </member>
    <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception})">
      <summary>
            Subscribes a value handler and an exception handler to an observable sequence.
            </summary>
    </member>
    <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action)">
      <summary>
            Subscribes a value handler and a completion handler to an observable sequence.
            </summary>
    </member>
    <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
      <summary>
            Subscribes a value handler, an exception handler, and a completion handler to an observable sequence.
            </summary>
    </member>
    <member name="T:System.Linq.Observer">
      <summary>
            Provides a set of static methods for creating observers.
            </summary>
    </member>
    <member name="M:System.Linq.Observer.ToObserver``1(System.Action{System.Collections.Generic.Notification{``0}})">
      <summary>
            Creates an observer from a notification callback.
            </summary>
    </member>
    <member name="M:System.Linq.Observer.ToNotifier``1(System.IObserver{``0})">
      <summary>
            Creates a notification callback from an observer.
            </summary>
    </member>
    <member name="M:System.Linq.Observer.Create``1(System.Action{``0})">
      <summary>
            Creates an observer from the specified OnNext action.
            </summary>
    </member>
    <member name="M:System.Linq.Observer.Create``1(System.Action{``0},System.Action{System.Exception})">
      <summary>
            Creates an observer from the specified OnNext and OnError actions.
            </summary>
    </member>
    <member name="M:System.Linq.Observer.Create``1(System.Action{``0},System.Action)">
      <summary>
            Creates an observer from the specified OnNext and OnCompleted actions.
            </summary>
    </member>
    <member name="M:System.Linq.Observer.Create``1(System.Action{``0},System.Action{System.Exception},System.Action)">
      <summary>
            Creates an observer from the specified OnNext, OnError, and OnCompleted actions.
            </summary>
    </member>
    <member name="M:System.Linq.Observer.AsObserver``1(System.IObserver{``0})">
      <summary>
            Hides the identity of an observer.
            </summary>
    </member>
    <member name="T:System.Collections.Generic.ListObservable`1">
      <summary>
            Represents an object that retains the values of the observable sequence and signals the end of the sequence.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.ListObservable`1.#ctor(System.IObservable{`0})">
      <summary>
            Constructs an object that retains the values of source and signals the end of the sequence.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.ListObservable`1.IndexOf(`0)">
      <summary>
            Determines the index of a specific item in the ListObservable.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.ListObservable`1.Insert(System.Int32,`0)">
      <summary>
            Inserts an item to the ListObservable at the specified index.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.ListObservable`1.RemoveAt(System.Int32)">
      <summary>
            Removes the ListObservable item at the specified index.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.ListObservable`1.Add(`0)">
      <summary>
            Adds an item to the ListObservable.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.ListObservable`1.Clear">
      <summary>
            Removes all items from the ListObservable.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.ListObservable`1.Contains(`0)">
      <summary>
            Determines whether the ListObservable contains a specific value.
            </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Collections.Generic.ListObservable`1.CopyTo(`0[],System.Int32)">
      <summary>
            Copies the elements of the ListObservable to an System.Array, starting at a particular System.Array index.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.ListObservable`1.Remove(`0)">
      <summary>
            Removes the first occurrence of a specific object from the ListObservable.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.ListObservable`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.ListObservable`1.Subscribe(System.IObserver{System.Object})">
      <summary>
            Subscribes an observer to the ListObservable which will be notified upon completion.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.ListObservable`1.Value">
      <summary>
            Returns the last value of the observable sequence.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.ListObservable`1.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.ListObservable`1.Count">
      <summary>
            Gets the number of elements contained in the ListObservable.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.ListObservable`1.IsReadOnly">
      <summary>
            Gets a value indicating whether the ListObservable is read-only.
            </summary>
    </member>
    <member name="T:System.Collections.Generic.Subject`1">
      <summary>
            Represents an object that is both an observable sequence as well as an observer.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Subject`1.#ctor(System.Concurrency.IScheduler)">
      <summary>
            Creates a subject.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Subject`1.#ctor">
      <summary>
            Creates a subject.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Subject`1.OnNext(`0)">
      <summary>
            Notifies all subscribed observers with the value.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Subject`1.OnError(System.Exception)">
      <summary>
            Notifies all subscribed observers with the exception.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Subject`1.OnCompleted">
      <summary>
            Notifies all subscribed observers of the end of the sequence.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Subject`1.Subscribe(System.IObserver{`0})">
      <summary>
            Subscribes an observer to the subject.
            </summary>
    </member>
    <member name="T:System.Linq.IGroupedObservable`2">
      <summary>
            Represents an observable sequence of values that have a common key.
            </summary>
    </member>
    <member name="P:System.Linq.IGroupedObservable`2.Key">
      <summary>
            Gets the common key.
            </summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherObservableExtensions">
      <summary>
            Provides a set of static methods for subscribing to IObservables using Dispatchers.
            </summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObservableExtensions.ObserveOn``1(System.IObservable{``0},System.Windows.Threading.Dispatcher)">
      <summary>
            Asynchronously notify observers using the dispatcher.
            </summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObservableExtensions.SubscribeOn``1(System.IObservable{``0},System.Windows.Threading.Dispatcher)">
      <summary>
            Asynchronously subscribes and unsubscribes observers using the dispatcher.
            </summary>
    </member>
    <member name="T:System.Threading.Tasks.TaskObservableExtensions">
      <summary>
            Provides a set of static methods for converting Tasks to IObservables.
            </summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskObservableExtensions.ToObservable(System.Threading.Tasks.Task)">
      <summary>
            Returns an observable sequence that contains the values of the underlying task.
            </summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskObservableExtensions.ToObservable``1(System.Threading.Tasks.Task{``0})">
      <summary>
            Returns an observable sequence that contains the values of the underlying task.
            </summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskObservableExtensions.ToTaskLast``1(System.IObservable{``0})">
      <summary>
            Returns a task that contains the last value of the underlying observable sequence.
            </summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskObservableExtensions.ToTaskLast``1(System.IObservable{``0},System.Object)">
      <summary>
            Returns a task that contains the last value of the underlying observable sequence.
            </summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskObservableExtensions.ToTaskLast``1(System.IObservable{``0},System.Threading.CancellationToken)">
      <summary>
            Returns a task that contains the last value of the underlying observable sequence.
            </summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskObservableExtensions.ToTaskLast``1(System.IObservable{``0},System.Threading.CancellationToken,System.Object)">
      <summary>
            Returns a task that contains the last value of the underlying observable sequence.
            </summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskObservableExtensions.ToTask``1(System.IObservable{``0})">
      <summary>
            Returns a task that contains all values of the underlying observable sequence.
            </summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskObservableExtensions.ToTask``1(System.IObservable{``0},System.Object)">
      <summary>
            Returns a task that contains all values of the underlying observable sequence.
            </summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskObservableExtensions.ToTask``1(System.IObservable{``0},System.Threading.CancellationToken)">
      <summary>
            Returns a task that contains all values of the underlying observable sequence.
            </summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskObservableExtensions.ToTask``1(System.IObservable{``0},System.Threading.CancellationToken,System.Object)">
      <summary>
            Returns a task that contains all values of the underlying observable sequence.
            </summary>
    </member>
    <member name="T:System.Windows.Forms.ControlObservableExtensions">
      <summary>
            Provides a set of static methods for subscribing to IObservables using Windows Forms controls.
            </summary>
    </member>
    <member name="M:System.Windows.Forms.ControlObservableExtensions.SubscribeOn``1(System.IObservable{``0},System.Windows.Forms.Control)">
      <summary>
            Asynchronously subscribes and unsubscribes observers using the Windows Forms control.
            </summary>
    </member>
    <member name="M:System.Windows.Forms.ControlObservableExtensions.ObserveOn``1(System.IObservable{``0},System.Windows.Forms.Control)">
      <summary>
            Asynchronously notify observers using the Windows Forms control.
            </summary>
    </member>
  </members>
</doc>